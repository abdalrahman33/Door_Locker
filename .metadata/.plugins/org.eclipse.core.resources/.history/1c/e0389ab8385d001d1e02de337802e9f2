/*
 * Timer1.c
 *
 *  Created on: Nov 5, 2022
 *      Author: Omar Eltoutongy
 */

#include "timer.h"
#include "common_macros.h"
#include <avr/io.h>
#include "gpio.h"
#include <avr/interrupt.h>


#ifdef TIMER1
/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr_T1)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
	if(g_callBackPtr_T1 != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR(TIMER1_COMPB_vect)
{
	if(g_callBackPtr_T1 != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR(TIMER1_OVF_vect)
{
	if(g_callBackPtr_T1 != NULL_PTR)
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*


 * Description :
 * Functional responsible for Initialization of Timer 1 by:
 * 1. Setup Timer Mode
 * 2. Setup Prescaler
 * 3. Setup the initial value
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
	TCCR1A=(TCCR1A & 0xFC)|(Config_Ptr->mode & 0x03);

	TCCR1B=(TCCR1B & 0XE7)|((Config_Ptr->mode & 0x0C)<<1);
	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07);

	TCNT1=Config_Ptr->initial_value;

	if((Config_Ptr->mode!=NORM_T1)&&(Config_Ptr->mode!=CTC_OCR_T1)&&(Config_Ptr->mode!=CTC_ICR_T1))
	{
		if(Config_Ptr->index==TIMER1A)
			{
			GPIO_setupPinDirection(PWM_T1A_ENABLE_PORT_ID,PWM_T1A_ENABLE_PIN_ID,PIN_OUTPUT);
			}
			else if(Config_Ptr->index==TIMER1B)
			{
				GPIO_setupPinDirection(PWM_T1B_ENABLE_PORT_ID,PWM_T1B_ENABLE_PIN_ID,PIN_OUTPUT);
			}
	}

	if(Config_Ptr->mode!=NORM_T1)
	{
		if(Config_Ptr->index==TIMER1A)
			{
				TCCR1A=(TCCR1A & 0x3F)|((Config_Ptr->comp_match & 0x03)<<6);
				OCR1A=Config_Ptr->compare_value;
				SET_BIT(TIMSK,OCIE1A);
			}
			else if(Config_Ptr->index==TIMER1B)
			{
				TCCR1A=(TCCR1A & 0xCF)|((Config_Ptr->comp_match & 0x03)<<4);
				OCR1B=Config_Ptr->compare_value;
				SET_BIT(TIMSK,OCIE1B);
			}
	}
	else
	{
		SET_BIT(TIMSK,TOIE1);
	}
}

/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer1_deInit(void)
{
	TCCR1A=0;
	TCCR1B=0;
	TCNT1=0;
	OCR1A=0;
	OCR1B=0;
	CLEAR_BIT(TIMSK,OCIE1A);
	CLEAR_BIT(TIMSK,OCIE1B);
	CLEAR_BIT(TIMSK,TOIE1);
}

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T1 = a_ptr;
}

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer1_pwmAdjust(uint16 duty_cycle)
{
	duty_cycle  = (uint16)(((uint32)65535*duty_cycle)/100);
	Timer1_ConfigType ConfigPTR={0,duty_cycle,PS_8_T1,FAST_PWM_OCR_T1,CLEAR_T1};
	Timer1_init(&ConfigPTR);
}
#endif
