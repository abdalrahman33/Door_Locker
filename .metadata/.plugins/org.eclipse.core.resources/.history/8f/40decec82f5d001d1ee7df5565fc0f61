/*
 * CONTROL_ECU.C
 *
 *  Created on: Nov 5, 2022
 *      Author: Omar Eltoutongy
 */
#include <avr/io.h>
#include <util/delay.h>
#include "std_types.h"
#include "external_eeprom.h"
#include "timer.h"
#include "twi.h"
#include "dc_motor.h"
#include "buzzer.h"
#include "uart.h"


#define NO_OF_DIGITS_IN_PASS 5
#define PASSWORD_ADDRESS 0x00FF

uint8 g_tick=0;
uint8 g_flag=0;
uint8 counterCheck=0;

typedef enum{
	SUCCEED,BREAK
}Message_Status;

void savePassword(void);
void openDoor(void);
void changePassword(void);
void motor_Door(void);
void error(void);
void buzzer(void);


int main(void)
{
	SREG   |= (1<<7);
	DcMotor_Init();

	Buzzer_init();

	TWI_ConfigType twiConfig={0b00000010,400000};
	TWI_init(&twiConfig);

	UART_ConfigType uartConfig={BIT_DATA_8,DISABLED,ONE_BIT,9600};
	UART_init(&uartConfig);

	savePassword();

	while(1)
	{
		if(UART_recieveByte()=='+')
		{
			openDoor();
		}
		else if(UART_recieveByte()=='-')
		{
			changePassword();
		}
	}



}

void savePassword(void)
{
	uint8 arr[5]={0};
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		arr[i]=UART_recieveByte();
	}
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		if(arr[i]!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	UART_sendByte(State);
	if(State==BREAK)
	{
		savePassword();
	}
	else
	{
		for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
		{
			_delay_ms(10);
			EEPROM_writeByte(PASSWORD_ADDRESS+i,arr[i]);
		}
	}
}

/*void openDoor(void)
{
	uint8 read;
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		_delay_ms(10);
		EEPROM_readByte(PASSWORD_ADDRESS+i, &read);
		EEPROM_readByte(PASSWORD_ADDRESS+i,&read);
		if(read!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	UART_sendByte(State);
	if(State==SUCCEED)
	{
		counterCheck=0;
		Timer1_setCallBack(motor_Door);
		Timer1_ConfigType t1Config={0,0,PS_64_T1,NORM_T1,NONE,TOGGLE_T1};
		Timer1_init(&t1Config);
	}
	else
	{
		counterCheck++;
		if(counterCheck==3)
		{
			counterCheck=0;
			error();
		}
		else
		{
			openDoor();
		}

	}
}*/


void openDoor(void)
{
	uint8 read;
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		_delay_ms(10);
		EEPROM_readByte(PASSWORD_ADDRESS+i, &read);
		/*EEPROM_readByte(PASSWORD_ADDRESS+i,&read);*/
		if(read!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	while(UART_recieveByte()!=1);
	UART_sendByte(State);

	if(State==SUCCEED)
	{
		counterCheck=0;
		Timer1_setCallBack(motor_Door);
		Timer1_ConfigType t1Config={0,0,PS_64_T1,NORM_T1,NONE,TOGGLE_T1};
		Timer1_init(&t1Config);
	}
	else if(State==BREAK)
	{
		counterCheck++;
		if(counterCheck==3)
		{
			counterCheck=0;
			error();
		}
		else
		{
			openDoor();
		}
	}
}

void changePassword(void)
{
	uint8 read;
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		_delay_ms(10);
		EEPROM_readByte(PASSWORD_ADDRESS+i, &read);
		/*EEPROM_readByte(PASSWORD_ADDRESS+i,&read);*/
		if(read!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	UART_sendByte(State);
	if(State==SUCCEED)
	{
		counterCheck=0;
		savePassword();
	}
	else
	{
		counterCheck++;
		if(counterCheck==3)
		{
			counterCheck=0;
			error();
		}
		else
		{
			changePassword();
		}

	}
}

void motor_Door(void)
{
	g_tick++;
	if(g_tick==66)
	{
		DcMotor_Rotate(NO_ROTATION,100);
		Timer1_deInit();
		g_tick=0;
	}
	else if(g_tick<30)
	{
		DcMotor_Rotate(CW_ROTATION,100);
	}
	else if(g_tick<36)
	{
		DcMotor_Rotate(NO_ROTATION,100);
	}
	else
	{
		DcMotor_Rotate(CCW_ROTATION,100);
	}



}


void error(void)
{
	Timer1_setCallBack(buzzer);
	Timer1_ConfigType t1Config={0,0,PS_64_T1,NONE,TOGGLE_T1};
	Timer1_init(&t1Config);
}


void buzzer(void)
{
	g_tick++;
	Buzzer_on();
	if(g_tick==120)
	{
		Buzzer_off();
		g_tick=0;
		Timer1_deInit();
	}

}
