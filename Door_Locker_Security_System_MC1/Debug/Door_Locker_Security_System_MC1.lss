
Door_Locker_Security_System_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000031e6  0000327a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800108  00800108  00003322  2**0
                  ALLOC
  3 .stab         00002f40  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b2  00000000  00000000  00006264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007816  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000970f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_7>
      20:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__vector_8>
      24:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__vector_9>
      28:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_10>
      2c:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 95 18 	jmp	0x312a	; 0x312a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                     				Main                     		           *
 *******************************************************************************/


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	SREG   |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	LCD_init();
     b68:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <LCD_init>

	UART_ConfigType uartConfig={BIT_DATA_8,DISABLED,ONE_BIT,9600};
     b6c:	ce 01       	movw	r24, r28
     b6e:	02 96       	adiw	r24, 0x02	; 2
     b70:	9a 87       	std	Y+10, r25	; 0x0a
     b72:	89 87       	std	Y+9, r24	; 0x09
     b74:	e8 ef       	ldi	r30, 0xF8	; 248
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	fc 87       	std	Y+12, r31	; 0x0c
     b7a:	eb 87       	std	Y+11, r30	; 0x0b
     b7c:	f7 e0       	ldi	r31, 0x07	; 7
     b7e:	fd 87       	std	Y+13, r31	; 0x0d
     b80:	eb 85       	ldd	r30, Y+11	; 0x0b
     b82:	fc 85       	ldd	r31, Y+12	; 0x0c
     b84:	00 80       	ld	r0, Z
     b86:	8b 85       	ldd	r24, Y+11	; 0x0b
     b88:	9c 85       	ldd	r25, Y+12	; 0x0c
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	8b 87       	std	Y+11, r24	; 0x0b
     b90:	e9 85       	ldd	r30, Y+9	; 0x09
     b92:	fa 85       	ldd	r31, Y+10	; 0x0a
     b94:	00 82       	st	Z, r0
     b96:	89 85       	ldd	r24, Y+9	; 0x09
     b98:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	9a 87       	std	Y+10, r25	; 0x0a
     b9e:	89 87       	std	Y+9, r24	; 0x09
     ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	9d 87       	std	Y+13, r25	; 0x0d
     ba6:	ed 85       	ldd	r30, Y+13	; 0x0d
     ba8:	ee 23       	and	r30, r30
     baa:	51 f7       	brne	.-44     	; 0xb80 <main+0x3a>
	UART_init(&uartConfig);
     bac:	ce 01       	movw	r24, r28
     bae:	02 96       	adiw	r24, 0x02	; 2
     bb0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <UART_init>

	/*
	 * For initiation of pass
	 */
	CreatePass();
     bb4:	0e 94 05 06 	call	0xc0a	; 0xc0a <CreatePass>

	for(;;)
	{
		LCD_clearScreen();
     bb8:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
		uint8 option;
		LCD_moveCursor(0,0);
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
     bc4:	80 e6       	ldi	r24, 0x60	; 96
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		LCD_moveCursor(1,0);
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
     bd4:	8e e6       	ldi	r24, 0x6E	; 110
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		option=KEYPAD_getPressedKey();
     bdc:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_getPressedKey>
     be0:	89 83       	std	Y+1, r24	; 0x01
		if(option=='+')
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	8b 32       	cpi	r24, 0x2B	; 43
     be6:	39 f4       	brne	.+14     	; 0xbf6 <main+0xb0>
		{
			UART_sendByte('+');
     be8:	8b e2       	ldi	r24, 0x2B	; 43
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			OpenDoor();
     bf0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OpenDoor>
     bf4:	e1 cf       	rjmp	.-62     	; 0xbb8 <main+0x72>
		}
		else if(option=='-')
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8d 32       	cpi	r24, 0x2D	; 45
     bfa:	f1 f6       	brne	.-68     	; 0xbb8 <main+0x72>
		{
			UART_sendByte('-');
     bfc:	8d e2       	ldi	r24, 0x2D	; 45
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			ChangePass();
     c04:	0e 94 94 08 	call	0x1128	; 0x1128 <ChangePass>
     c08:	d7 cf       	rjmp	.-82     	; 0xbb8 <main+0x72>

00000c0a <CreatePass>:
/*******************************************************************************
 *                  		      Functions                                    *
 *******************************************************************************/

void CreatePass(void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	6e 97       	sbiw	r28, 0x1e	; 30
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
	sint8 value=-1;
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_displayString("Plz enter pass: ");
     c22:	8e e7       	ldi	r24, 0x7E	; 126
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
	LCD_moveCursor(1,0);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>

	uint8 counter=0;
     c32:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		counter++;
     c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
		value=KEYPAD_getPressedKey();
     c3a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_getPressedKey>
     c3e:	8e 8f       	std	Y+30, r24	; 0x1e
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	aa e7       	ldi	r26, 0x7A	; 122
     c46:	b3 e4       	ldi	r27, 0x43	; 67
     c48:	89 8f       	std	Y+25, r24	; 0x19
     c4a:	9a 8f       	std	Y+26, r25	; 0x1a
     c4c:	ab 8f       	std	Y+27, r26	; 0x1b
     c4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c50:	69 8d       	ldd	r22, Y+25	; 0x19
     c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	4a ef       	ldi	r20, 0xFA	; 250
     c5e:	54 e4       	ldi	r21, 0x44	; 68
     c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	8d 8b       	std	Y+21, r24	; 0x15
     c6a:	9e 8b       	std	Y+22, r25	; 0x16
     c6c:	af 8b       	std	Y+23, r26	; 0x17
     c6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c70:	6d 89       	ldd	r22, Y+21	; 0x15
     c72:	7e 89       	ldd	r23, Y+22	; 0x16
     c74:	8f 89       	ldd	r24, Y+23	; 0x17
     c76:	98 8d       	ldd	r25, Y+24	; 0x18
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e8       	ldi	r20, 0x80	; 128
     c7e:	5f e3       	ldi	r21, 0x3F	; 63
     c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c84:	88 23       	and	r24, r24
     c86:	2c f4       	brge	.+10     	; 0xc92 <CreatePass+0x88>
		__ticks = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c 8b       	std	Y+20, r25	; 0x14
     c8e:	8b 8b       	std	Y+19, r24	; 0x13
     c90:	3f c0       	rjmp	.+126    	; 0xd10 <CreatePass+0x106>
	else if (__tmp > 65535)
     c92:	6d 89       	ldd	r22, Y+21	; 0x15
     c94:	7e 89       	ldd	r23, Y+22	; 0x16
     c96:	8f 89       	ldd	r24, Y+23	; 0x17
     c98:	98 8d       	ldd	r25, Y+24	; 0x18
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	3f ef       	ldi	r19, 0xFF	; 255
     c9e:	4f e7       	ldi	r20, 0x7F	; 127
     ca0:	57 e4       	ldi	r21, 0x47	; 71
     ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca6:	18 16       	cp	r1, r24
     ca8:	4c f5       	brge	.+82     	; 0xcfc <CreatePass+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     caa:	69 8d       	ldd	r22, Y+25	; 0x19
     cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e2       	ldi	r20, 0x20	; 32
     cb8:	51 e4       	ldi	r21, 0x41	; 65
     cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	9c 8b       	std	Y+20, r25	; 0x14
     cd0:	8b 8b       	std	Y+19, r24	; 0x13
     cd2:	0f c0       	rjmp	.+30     	; 0xcf2 <CreatePass+0xe8>
     cd4:	88 ec       	ldi	r24, 0xC8	; 200
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a 8b       	std	Y+18, r25	; 0x12
     cda:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cdc:	89 89       	ldd	r24, Y+17	; 0x11
     cde:	9a 89       	ldd	r25, Y+18	; 0x12
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <CreatePass+0xd6>
     ce4:	9a 8b       	std	Y+18, r25	; 0x12
     ce6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce8:	8b 89       	ldd	r24, Y+19	; 0x13
     cea:	9c 89       	ldd	r25, Y+20	; 0x14
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	9c 8b       	std	Y+20, r25	; 0x14
     cf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf2:	8b 89       	ldd	r24, Y+19	; 0x13
     cf4:	9c 89       	ldd	r25, Y+20	; 0x14
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	69 f7       	brne	.-38     	; 0xcd4 <CreatePass+0xca>
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <CreatePass+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cfc:	6d 89       	ldd	r22, Y+21	; 0x15
     cfe:	7e 89       	ldd	r23, Y+22	; 0x16
     d00:	8f 89       	ldd	r24, Y+23	; 0x17
     d02:	98 8d       	ldd	r25, Y+24	; 0x18
     d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
     d10:	8b 89       	ldd	r24, Y+19	; 0x13
     d12:	9c 89       	ldd	r25, Y+20	; 0x14
     d14:	98 8b       	std	Y+16, r25	; 0x10
     d16:	8f 87       	std	Y+15, r24	; 0x0f
     d18:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1a:	98 89       	ldd	r25, Y+16	; 0x10
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <CreatePass+0x112>
     d20:	98 8b       	std	Y+16, r25	; 0x10
     d22:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		if(counter<=NO_OF_DIGITS_IN_PASS)
     d24:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d26:	86 30       	cpi	r24, 0x06	; 6
     d28:	48 f4       	brcc	.+18     	; 0xd3c <CreatePass+0x132>
		{
			UART_sendByte(value);
     d2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d2c:	99 27       	eor	r25, r25
     d2e:	87 fd       	sbrc	r24, 7
     d30:	90 95       	com	r25
     d32:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			LCD_displayCharacter('*');
     d36:	8a e2       	ldi	r24, 0x2A	; 42
     d38:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
		}

	}while(value!='=');
     d3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3e:	8d 33       	cpi	r24, 0x3D	; 61
     d40:	09 f0       	breq	.+2      	; 0xd44 <CreatePass+0x13a>
     d42:	78 cf       	rjmp	.-272    	; 0xc34 <CreatePass+0x2a>
	LCD_clearScreen();
     d44:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString("Plz re-enter the");
     d50:	8f e8       	ldi	r24, 0x8F	; 143
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
	LCD_moveCursor(1,0);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString("same pass: ");
     d60:	80 ea       	ldi	r24, 0xA0	; 160
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>

	counter=0;
     d68:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		counter++;
     d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8d 8f       	std	Y+29, r24	; 0x1d
		value=KEYPAD_getPressedKey();
     d70:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_getPressedKey>
     d74:	8e 8f       	std	Y+30, r24	; 0x1e
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	aa e7       	ldi	r26, 0x7A	; 122
     d7c:	b3 e4       	ldi	r27, 0x43	; 67
     d7e:	8b 87       	std	Y+11, r24	; 0x0b
     d80:	9c 87       	std	Y+12, r25	; 0x0c
     d82:	ad 87       	std	Y+13, r26	; 0x0d
     d84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d86:	6b 85       	ldd	r22, Y+11	; 0x0b
     d88:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4a ef       	ldi	r20, 0xFA	; 250
     d94:	54 e4       	ldi	r21, 0x44	; 68
     d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8f 83       	std	Y+7, r24	; 0x07
     da0:	98 87       	std	Y+8, r25	; 0x08
     da2:	a9 87       	std	Y+9, r26	; 0x09
     da4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da6:	6f 81       	ldd	r22, Y+7	; 0x07
     da8:	78 85       	ldd	r23, Y+8	; 0x08
     daa:	89 85       	ldd	r24, Y+9	; 0x09
     dac:	9a 85       	ldd	r25, Y+10	; 0x0a
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e8       	ldi	r20, 0x80	; 128
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dba:	88 23       	and	r24, r24
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <CreatePass+0x1be>
		__ticks = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	3f c0       	rjmp	.+126    	; 0xe46 <CreatePass+0x23c>
	else if (__tmp > 65535)
     dc8:	6f 81       	ldd	r22, Y+7	; 0x07
     dca:	78 85       	ldd	r23, Y+8	; 0x08
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	4f e7       	ldi	r20, 0x7F	; 127
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ddc:	18 16       	cp	r1, r24
     dde:	4c f5       	brge	.+82     	; 0xe32 <CreatePass+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	6b 85       	ldd	r22, Y+11	; 0x0b
     de2:	7c 85       	ldd	r23, Y+12	; 0x0c
     de4:	8d 85       	ldd	r24, Y+13	; 0x0d
     de6:	9e 85       	ldd	r25, Y+14	; 0x0e
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <CreatePass+0x21e>
     e0a:	88 ec       	ldi	r24, 0xC8	; 200
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <CreatePass+0x20c>
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f7       	brne	.-38     	; 0xe0a <CreatePass+0x200>
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <CreatePass+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	6f 81       	ldd	r22, Y+7	; 0x07
     e34:	78 85       	ldd	r23, Y+8	; 0x08
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <CreatePass+0x248>
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		if(counter<=NO_OF_DIGITS_IN_PASS)
     e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5c:	86 30       	cpi	r24, 0x06	; 6
     e5e:	48 f4       	brcc	.+18     	; 0xe72 <CreatePass+0x268>
		{
			UART_sendByte(value);
     e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e62:	99 27       	eor	r25, r25
     e64:	87 fd       	sbrc	r24, 7
     e66:	90 95       	com	r25
     e68:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			LCD_displayCharacter('*');
     e6c:	8a e2       	ldi	r24, 0x2A	; 42
     e6e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
		}

	}while(value!='=');
     e72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e74:	8d 33       	cpi	r24, 0x3D	; 61
     e76:	09 f0       	breq	.+2      	; 0xe7a <CreatePass+0x270>
     e78:	78 cf       	rjmp	.-272    	; 0xd6a <CreatePass+0x160>
	LCD_clearScreen();
     e7a:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	if(UART_recieveByte())
     e7e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <UART_recieveByte>
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	11 f0       	breq	.+4      	; 0xe8a <CreatePass+0x280>
	{
		CreatePass();
     e86:	0e 94 05 06 	call	0xc0a	; 0xc0a <CreatePass>
	}
	else
	{
		return;
	}
}
     e8a:	6e 96       	adiw	r28, 0x1e	; 30
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <OpenDoor>:

void OpenDoor(void)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	6d 97       	sbiw	r28, 0x1d	; 29
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     eb0:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString("Plz enter pass: ");
     ebc:	8e e7       	ldi	r24, 0x7E	; 126
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
	LCD_moveCursor(1,0); //ask for password
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>

	sint8 value;
	uint8 counter=0;
     ecc:	1f 86       	std	Y+15, r1	; 0x0f
	do  //write password & wait until '=' is pressed
	{
		counter++;
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
		value=KEYPAD_getPressedKey();
     ed4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_getPressedKey>
     ed8:	88 8b       	std	Y+16, r24	; 0x10
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	aa e7       	ldi	r26, 0x7A	; 122
     ee0:	b3 e4       	ldi	r27, 0x43	; 67
     ee2:	8b 87       	std	Y+11, r24	; 0x0b
     ee4:	9c 87       	std	Y+12, r25	; 0x0c
     ee6:	ad 87       	std	Y+13, r26	; 0x0d
     ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	6b 85       	ldd	r22, Y+11	; 0x0b
     eec:	7c 85       	ldd	r23, Y+12	; 0x0c
     eee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	4a ef       	ldi	r20, 0xFA	; 250
     ef8:	54 e4       	ldi	r21, 0x44	; 68
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8f 83       	std	Y+7, r24	; 0x07
     f04:	98 87       	std	Y+8, r25	; 0x08
     f06:	a9 87       	std	Y+9, r26	; 0x09
     f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1e:	88 23       	and	r24, r24
     f20:	2c f4       	brge	.+10     	; 0xf2c <OpenDoor+0x90>
		__ticks = 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <OpenDoor+0x10e>
	else if (__tmp > 65535)
     f2c:	6f 81       	ldd	r22, Y+7	; 0x07
     f2e:	78 85       	ldd	r23, Y+8	; 0x08
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	9a 85       	ldd	r25, Y+10	; 0x0a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	4f e7       	ldi	r20, 0x7F	; 127
     f3a:	57 e4       	ldi	r21, 0x47	; 71
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f40:	18 16       	cp	r1, r24
     f42:	4c f5       	brge	.+82     	; 0xf96 <OpenDoor+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f44:	6b 85       	ldd	r22, Y+11	; 0x0b
     f46:	7c 85       	ldd	r23, Y+12	; 0x0c
     f48:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	51 e4       	ldi	r21, 0x41	; 65
     f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <OpenDoor+0xf0>
     f6e:	88 ec       	ldi	r24, 0xC8	; 200
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <OpenDoor+0xde>
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	9e 83       	std	Y+6, r25	; 0x06
     f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f7       	brne	.-38     	; 0xf6e <OpenDoor+0xd2>
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <OpenDoor+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	6f 81       	ldd	r22, Y+7	; 0x07
     f98:	78 85       	ldd	r23, Y+8	; 0x08
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <OpenDoor+0x11a>
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		if(counter<=NO_OF_DIGITS_IN_PASS) //accept only 5 inputs to send & display
     fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc0:	86 30       	cpi	r24, 0x06	; 6
     fc2:	48 f4       	brcc	.+18     	; 0xfd6 <OpenDoor+0x13a>
		{
			UART_sendByte(value);
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	99 27       	eor	r25, r25
     fc8:	87 fd       	sbrc	r24, 7
     fca:	90 95       	com	r25
     fcc:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			LCD_displayCharacter('*');
     fd0:	8a e2       	ldi	r24, 0x2A	; 42
     fd2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
		}

	}while(value!='=');
     fd6:	88 89       	ldd	r24, Y+16	; 0x10
     fd8:	8d 33       	cpi	r24, 0x3D	; 61
     fda:	09 f0       	breq	.+2      	; 0xfde <OpenDoor+0x142>
     fdc:	78 cf       	rjmp	.-272    	; 0xece <OpenDoor+0x32>


	LCD_clearScreen();
     fde:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>

	if(UART_recieveByte()) //error in password
     fe2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <UART_recieveByte>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	89 f0       	breq	.+34     	; 0x100c <OpenDoor+0x170>
	{
		counterCheck++;
     fea:	80 91 0a 01 	lds	r24, 0x010A
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 0a 01 	sts	0x010A, r24
		if(counterCheck==3) //check 3 times before sending error
     ff4:	80 91 0a 01 	lds	r24, 0x010A
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	29 f4       	brne	.+10     	; 0x1006 <OpenDoor+0x16a>
		{
			counterCheck=0;
     ffc:	10 92 0a 01 	sts	0x010A, r1
			Error();
    1000:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Error>
    1004:	35 c0       	rjmp	.+106    	; 0x1070 <OpenDoor+0x1d4>
		}
		else
		{
			OpenDoor(); //repeat as long as counter less than 3
    1006:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OpenDoor>
    100a:	32 c0       	rjmp	.+100    	; 0x1070 <OpenDoor+0x1d4>
		}
	}
	else //success & set timer to open door
	{
		LCD_clearScreen();
    100c:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
		counterCheck=0;
    1010:	10 92 0a 01 	sts	0x010A, r1
		Timer1_setCallBack(OpenDoor_callback);
    1014:	81 e4       	ldi	r24, 0x41	; 65
    1016:	98 e0       	ldi	r25, 0x08	; 8
    1018:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Timer1_setCallBack>
		Timer1_ConfigType t1Config={0,0,PS_64_T1,NORM_T1,NONE,TOGGLE_T1};
    101c:	ce 01       	movw	r24, r28
    101e:	41 96       	adiw	r24, 0x11	; 17
    1020:	9a 8f       	std	Y+26, r25	; 0x1a
    1022:	89 8f       	std	Y+25, r24	; 0x19
    1024:	ef ef       	ldi	r30, 0xFF	; 255
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	fc 8f       	std	Y+28, r31	; 0x1c
    102a:	eb 8f       	std	Y+27, r30	; 0x1b
    102c:	f8 e0       	ldi	r31, 0x08	; 8
    102e:	fd 8f       	std	Y+29, r31	; 0x1d
    1030:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1032:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1034:	00 80       	ld	r0, Z
    1036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	9c 8f       	std	Y+28, r25	; 0x1c
    103e:	8b 8f       	std	Y+27, r24	; 0x1b
    1040:	e9 8d       	ldd	r30, Y+25	; 0x19
    1042:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1044:	00 82       	st	Z, r0
    1046:	89 8d       	ldd	r24, Y+25	; 0x19
    1048:	9a 8d       	ldd	r25, Y+26	; 0x1a
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	9a 8f       	std	Y+26, r25	; 0x1a
    104e:	89 8f       	std	Y+25, r24	; 0x19
    1050:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1052:	91 50       	subi	r25, 0x01	; 1
    1054:	9d 8f       	std	Y+29, r25	; 0x1d
    1056:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1058:	ee 23       	and	r30, r30
    105a:	51 f7       	brne	.-44     	; 0x1030 <OpenDoor+0x194>
		Timer1_init(&t1Config);
    105c:	ce 01       	movw	r24, r28
    105e:	41 96       	adiw	r24, 0x11	; 17
    1060:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Timer1_init>
		while(g_flag==0);
    1064:	80 91 09 01 	lds	r24, 0x0109
    1068:	88 23       	and	r24, r24
    106a:	e1 f3       	breq	.-8      	; 0x1064 <OpenDoor+0x1c8>
		g_flag=0;
    106c:	10 92 09 01 	sts	0x0109, r1
	}
}
    1070:	6d 96       	adiw	r28, 0x1d	; 29
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <OpenDoor_callback>:



void OpenDoor_callback(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    108a:	80 91 08 01 	lds	r24, 0x0108
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	80 93 08 01 	sts	0x0108, r24
	if(g_tick==66)
    1094:	80 91 08 01 	lds	r24, 0x0108
    1098:	82 34       	cpi	r24, 0x42	; 66
    109a:	d1 f4       	brne	.+52     	; 0x10d0 <OpenDoor_callback+0x4e>
	{
		LCD_clearScreen();
    109c:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Done   ");
    10a8:	8c ea       	ldi	r24, 0xAC	; 172
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		LCD_moveCursor(1,0);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Locking    ");
    10b8:	84 eb       	ldi	r24, 0xB4	; 180
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		Timer1_deInit();
    10c0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <Timer1_deInit>
		g_tick=0;
    10c4:	10 92 08 01 	sts	0x0108, r1
		g_flag=1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 09 01 	sts	0x0109, r24
    10ce:	29 c0       	rjmp	.+82     	; 0x1122 <OpenDoor_callback+0xa0>
	}
	else if(g_tick<30)
    10d0:	80 91 08 01 	lds	r24, 0x0108
    10d4:	8e 31       	cpi	r24, 0x1E	; 30
    10d6:	88 f4       	brcc	.+34     	; 0x10fa <OpenDoor_callback+0x78>
	{
		LCD_moveCursor(0,0);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Door is    ");
    10e0:	80 ec       	ldi	r24, 0xC0	; 192
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		LCD_moveCursor(1,0);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Unlocking    ");
    10f0:	8c ec       	ldi	r24, 0xCC	; 204
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <OpenDoor_callback+0xa0>
	}
	else if(g_tick<66)
    10fa:	80 91 08 01 	lds	r24, 0x0108
    10fe:	82 34       	cpi	r24, 0x42	; 66
    1100:	80 f4       	brcc	.+32     	; 0x1122 <OpenDoor_callback+0xa0>
	{
		LCD_moveCursor(0,0);
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Door is   ");
    110a:	8a ed       	ldi	r24, 0xDA	; 218
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
		LCD_moveCursor(1,0);
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
		LCD_displayString("Locking    ");
    111a:	84 eb       	ldi	r24, 0xB4	; 180
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
	}



}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <ChangePass>:


void ChangePass(void)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	60 97       	sbiw	r28, 0x10	; 16
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte('-');
    113c:	8d e2       	ldi	r24, 0x2D	; 45
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
	LCD_clearScreen();
    1144:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString("Plz enter pass: ");
    1150:	8e e7       	ldi	r24, 0x7E	; 126
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
	LCD_moveCursor(1,0);
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>

	sint8 value;
	uint8 counter=0;
    1160:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		counter++;
    1162:	8f 85       	ldd	r24, Y+15	; 0x0f
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	8f 87       	std	Y+15, r24	; 0x0f
		value=KEYPAD_getPressedKey();
    1168:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <KEYPAD_getPressedKey>
    116c:	88 8b       	std	Y+16, r24	; 0x10
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	aa e7       	ldi	r26, 0x7A	; 122
    1174:	b3 e4       	ldi	r27, 0x43	; 67
    1176:	8b 87       	std	Y+11, r24	; 0x0b
    1178:	9c 87       	std	Y+12, r25	; 0x0c
    117a:	ad 87       	std	Y+13, r26	; 0x0d
    117c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1180:	7c 85       	ldd	r23, Y+12	; 0x0c
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a ef       	ldi	r20, 0xFA	; 250
    118c:	54 e4       	ldi	r21, 0x44	; 68
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	8f 83       	std	Y+7, r24	; 0x07
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	a9 87       	std	Y+9, r26	; 0x09
    119c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119e:	6f 81       	ldd	r22, Y+7	; 0x07
    11a0:	78 85       	ldd	r23, Y+8	; 0x08
    11a2:	89 85       	ldd	r24, Y+9	; 0x09
    11a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5f e3       	ldi	r21, 0x3F	; 63
    11ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <ChangePass+0x98>
		__ticks = 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	3f c0       	rjmp	.+126    	; 0x123e <ChangePass+0x116>
	else if (__tmp > 65535)
    11c0:	6f 81       	ldd	r22, Y+7	; 0x07
    11c2:	78 85       	ldd	r23, Y+8	; 0x08
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	57 e4       	ldi	r21, 0x47	; 71
    11d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	4c f5       	brge	.+82     	; 0x122a <ChangePass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11da:	7c 85       	ldd	r23, Y+12	; 0x0c
    11dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11de:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e2       	ldi	r20, 0x20	; 32
    11e6:	51 e4       	ldi	r21, 0x41	; 65
    11e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <ChangePass+0xf8>
    1202:	88 ec       	ldi	r24, 0xC8	; 200
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9c 83       	std	Y+4, r25	; 0x04
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <ChangePass+0xe6>
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	69 f7       	brne	.-38     	; 0x1202 <ChangePass+0xda>
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <ChangePass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	9e 83       	std	Y+6, r25	; 0x06
    123c:	8d 83       	std	Y+5, r24	; 0x05
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <ChangePass+0x122>
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		if(counter<=5)
    1252:	8f 85       	ldd	r24, Y+15	; 0x0f
    1254:	86 30       	cpi	r24, 0x06	; 6
    1256:	48 f4       	brcc	.+18     	; 0x126a <ChangePass+0x142>
		{
			UART_sendByte(value);
    1258:	88 89       	ldd	r24, Y+16	; 0x10
    125a:	99 27       	eor	r25, r25
    125c:	87 fd       	sbrc	r24, 7
    125e:	90 95       	com	r25
    1260:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
			LCD_displayCharacter('*');
    1264:	8a e2       	ldi	r24, 0x2A	; 42
    1266:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
		}

	}while(value!='=');
    126a:	88 89       	ldd	r24, Y+16	; 0x10
    126c:	8d 33       	cpi	r24, 0x3D	; 61
    126e:	09 f0       	breq	.+2      	; 0x1272 <ChangePass+0x14a>
    1270:	78 cf       	rjmp	.-272    	; 0x1162 <ChangePass+0x3a>
	LCD_clearScreen();
    1272:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	if(UART_recieveByte())
    1276:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <UART_recieveByte>
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	89 f0       	breq	.+34     	; 0x12a0 <ChangePass+0x178>
	{
		counterCheck++;
    127e:	80 91 0a 01 	lds	r24, 0x010A
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 93 0a 01 	sts	0x010A, r24
		if(counterCheck==3)
    1288:	80 91 0a 01 	lds	r24, 0x010A
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	29 f4       	brne	.+10     	; 0x129a <ChangePass+0x172>
		{
			counterCheck=0;
    1290:	10 92 0a 01 	sts	0x010A, r1
			Error();
    1294:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Error>
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <ChangePass+0x180>
		}
		else
		{
			ChangePass();
    129a:	0e 94 94 08 	call	0x1128	; 0x1128 <ChangePass>
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <ChangePass+0x180>
		}
	}
	else
	{
		counterCheck=0;
    12a0:	10 92 0a 01 	sts	0x010A, r1
		CreatePass();
    12a4:	0e 94 05 06 	call	0xc0a	; 0xc0a <CreatePass>
	}
}
    12a8:	60 96       	adiw	r28, 0x10	; 16
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <Error>:



void Error(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	28 97       	sbiw	r28, 0x08	; 8
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(Error_callback);
    12ce:	84 e9       	ldi	r24, 0x94	; 148
    12d0:	99 e0       	ldi	r25, 0x09	; 9
    12d2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Timer1_setCallBack>
	Timer1_ConfigType t1Config={0,0,PS_64_T1,NONE,TOGGLE_T1};
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	fe 01       	movw	r30, r28
    12da:	31 96       	adiw	r30, 0x01	; 1
    12dc:	df 01       	movw	r26, r30
    12de:	98 2f       	mov	r25, r24
    12e0:	1d 92       	st	X+, r1
    12e2:	9a 95       	dec	r25
    12e4:	e9 f7       	brne	.-6      	; 0x12e0 <Error+0x26>
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&t1Config);
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Timer1_init>

	LCD_clearScreen();
    12f6:	0e 94 94 13 	call	0x2728	; 0x2728 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString("I Caught u");
    1302:	85 ee       	ldi	r24, 0xE5	; 229
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>

	while(g_flag==0);
    130a:	80 91 09 01 	lds	r24, 0x0109
    130e:	88 23       	and	r24, r24
    1310:	e1 f3       	breq	.-8      	; 0x130a <Error+0x50>
	g_flag=0;
    1312:	10 92 09 01 	sts	0x0109, r1


}
    1316:	28 96       	adiw	r28, 0x08	; 8
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <Error_callback>:

void Error_callback(void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1330:	80 91 08 01 	lds	r24, 0x0108
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 08 01 	sts	0x0108, r24
	if(g_tick==120)
    133a:	80 91 08 01 	lds	r24, 0x0108
    133e:	88 37       	cpi	r24, 0x78	; 120
    1340:	39 f4       	brne	.+14     	; 0x1350 <Error_callback+0x28>
	{
		g_flag=1;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 09 01 	sts	0x0109, r24
		Timer1_deInit();
    1348:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <Timer1_deInit>
		g_tick=0;
    134c:	10 92 08 01 	sts	0x0108, r1
	}
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <GPIO_setupPinDirection+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_setupPinDirection+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	6a 83       	std	Y+2, r22	; 0x02
    1368:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 30       	cpi	r24, 0x08	; 8
    136e:	08 f0       	brcs	.+2      	; 0x1372 <GPIO_setupPinDirection+0x1c>
    1370:	d5 c0       	rjmp	.+426    	; 0x151c <GPIO_setupPinDirection+0x1c6>
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	08 f0       	brcs	.+2      	; 0x137a <GPIO_setupPinDirection+0x24>
    1378:	d1 c0       	rjmp	.+418    	; 0x151c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3d 83       	std	Y+5, r19	; 0x05
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <GPIO_setupPinDirection+0x3a>
    138e:	43 c0       	rjmp	.+134    	; 0x1416 <GPIO_setupPinDirection+0xc0>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <GPIO_setupPinDirection+0x4e>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	71 f0       	breq	.+28     	; 0x13be <GPIO_setupPinDirection+0x68>
    13a2:	bc c0       	rjmp	.+376    	; 0x151c <GPIO_setupPinDirection+0x1c6>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <GPIO_setupPinDirection+0x5a>
    13ae:	5f c0       	rjmp	.+190    	; 0x146e <GPIO_setupPinDirection+0x118>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <GPIO_setupPinDirection+0x66>
    13ba:	85 c0       	rjmp	.+266    	; 0x14c6 <GPIO_setupPinDirection+0x170>
    13bc:	af c0       	rjmp	.+350    	; 0x151c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13c4:	aa e3       	ldi	r26, 0x3A	; 58
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ea e3       	ldi	r30, 0x3A	; 58
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_setupPinDirection+0x8c>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_setupPinDirection+0x88>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	98 c0       	rjmp	.+304    	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13ec:	aa e3       	ldi	r26, 0x3A	; 58
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ea e3       	ldi	r30, 0x3A	; 58
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_setupPinDirection+0xb4>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_setupPinDirection+0xb0>
    140e:	80 95       	com	r24
    1410:	84 23       	and	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	83 c0       	rjmp	.+262    	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	a1 f4       	brne	.+40     	; 0x1444 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_setupPinDirection+0xe4>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_setupPinDirection+0xe0>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	6c c0       	rjmp	.+216    	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_setupPinDirection+0x10c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_setupPinDirection+0x108>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	57 c0       	rjmp	.+174    	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	a1 f4       	brne	.+40     	; 0x149c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1474:	a4 e3       	ldi	r26, 0x34	; 52
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_setupPinDirection+0x13c>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_setupPinDirection+0x138>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	40 c0       	rjmp	.+128    	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    149c:	a4 e3       	ldi	r26, 0x34	; 52
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e4 e3       	ldi	r30, 0x34	; 52
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_setupPinDirection+0x164>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_setupPinDirection+0x160>
    14be:	80 95       	com	r24
    14c0:	84 23       	and	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	2b c0       	rjmp	.+86     	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	a1 f4       	brne	.+40     	; 0x14f4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14cc:	a1 e3       	ldi	r26, 0x31	; 49
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e1 e3       	ldi	r30, 0x31	; 49
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <GPIO_setupPinDirection+0x194>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <GPIO_setupPinDirection+0x190>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14f4:	a1 e3       	ldi	r26, 0x31	; 49
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e1 e3       	ldi	r30, 0x31	; 49
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <GPIO_setupPinDirection+0x1bc>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <GPIO_setupPinDirection+0x1b8>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <GPIO_writePin+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <GPIO_writePin+0x8>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	6a 83       	std	Y+2, r22	; 0x02
    153e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 30       	cpi	r24, 0x08	; 8
    1544:	08 f0       	brcs	.+2      	; 0x1548 <GPIO_writePin+0x1c>
    1546:	d5 c0       	rjmp	.+426    	; 0x16f2 <GPIO_writePin+0x1c6>
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	08 f0       	brcs	.+2      	; 0x1550 <GPIO_writePin+0x24>
    154e:	d1 c0       	rjmp	.+418    	; 0x16f2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3d 83       	std	Y+5, r19	; 0x05
    1558:	2c 83       	std	Y+4, r18	; 0x04
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_writePin+0x3a>
    1564:	43 c0       	rjmp	.+134    	; 0x15ec <GPIO_writePin+0xc0>
    1566:	2c 81       	ldd	r18, Y+4	; 0x04
    1568:	3d 81       	ldd	r19, Y+5	; 0x05
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <GPIO_writePin+0x4e>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	71 f0       	breq	.+28     	; 0x1594 <GPIO_writePin+0x68>
    1578:	bc c0       	rjmp	.+376    	; 0x16f2 <GPIO_writePin+0x1c6>
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <GPIO_writePin+0x5a>
    1584:	5f c0       	rjmp	.+190    	; 0x1644 <GPIO_writePin+0x118>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <GPIO_writePin+0x66>
    1590:	85 c0       	rjmp	.+266    	; 0x169c <GPIO_writePin+0x170>
    1592:	af c0       	rjmp	.+350    	; 0x16f2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    159a:	ab e3       	ldi	r26, 0x3B	; 59
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	eb e3       	ldi	r30, 0x3B	; 59
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_writePin+0x8c>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_writePin+0x88>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	98 c0       	rjmp	.+304    	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15c2:	ab e3       	ldi	r26, 0x3B	; 59
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	eb e3       	ldi	r30, 0x3B	; 59
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_writePin+0xb4>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_writePin+0xb0>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	83 c0       	rjmp	.+262    	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	a1 f4       	brne	.+40     	; 0x161a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15f2:	a8 e3       	ldi	r26, 0x38	; 56
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_writePin+0xe4>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_writePin+0xe0>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	6c c0       	rjmp	.+216    	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    161a:	a8 e3       	ldi	r26, 0x38	; 56
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_writePin+0x10c>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_writePin+0x108>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	57 c0       	rjmp	.+174    	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	a1 f4       	brne	.+40     	; 0x1672 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    164a:	a5 e3       	ldi	r26, 0x35	; 53
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_writePin+0x13c>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_writePin+0x138>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	40 c0       	rjmp	.+128    	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1672:	a5 e3       	ldi	r26, 0x35	; 53
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e5 e3       	ldi	r30, 0x35	; 53
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_writePin+0x164>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_writePin+0x160>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	2b c0       	rjmp	.+86     	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16a2:	a2 e3       	ldi	r26, 0x32	; 50
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_writePin+0x194>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_writePin+0x190>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16ca:	a2 e3       	ldi	r26, 0x32	; 50
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e2 e3       	ldi	r30, 0x32	; 50
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_writePin+0x1bc>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_writePin+0x1b8>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <GPIO_readPin+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <GPIO_readPin+0x8>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1714:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	08 f0       	brcs	.+2      	; 0x171e <GPIO_readPin+0x1c>
    171c:	84 c0       	rjmp	.+264    	; 0x1826 <GPIO_readPin+0x124>
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	08 f0       	brcs	.+2      	; 0x1726 <GPIO_readPin+0x24>
    1724:	80 c0       	rjmp	.+256    	; 0x1826 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3d 83       	std	Y+5, r19	; 0x05
    172e:	2c 83       	std	Y+4, r18	; 0x04
    1730:	4c 81       	ldd	r20, Y+4	; 0x04
    1732:	5d 81       	ldd	r21, Y+5	; 0x05
    1734:	41 30       	cpi	r20, 0x01	; 1
    1736:	51 05       	cpc	r21, r1
    1738:	79 f1       	breq	.+94     	; 0x1798 <GPIO_readPin+0x96>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	91 05       	cpc	r25, r1
    1742:	34 f4       	brge	.+12     	; 0x1750 <GPIO_readPin+0x4e>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	21 15       	cp	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	69 f0       	breq	.+26     	; 0x1768 <GPIO_readPin+0x66>
    174e:	6b c0       	rjmp	.+214    	; 0x1826 <GPIO_readPin+0x124>
    1750:	4c 81       	ldd	r20, Y+4	; 0x04
    1752:	5d 81       	ldd	r21, Y+5	; 0x05
    1754:	42 30       	cpi	r20, 0x02	; 2
    1756:	51 05       	cpc	r21, r1
    1758:	b9 f1       	breq	.+110    	; 0x17c8 <GPIO_readPin+0xc6>
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <GPIO_readPin+0x64>
    1764:	49 c0       	rjmp	.+146    	; 0x17f8 <GPIO_readPin+0xf6>
    1766:	5f c0       	rjmp	.+190    	; 0x1826 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1768:	e9 e3       	ldi	r30, 0x39	; 57
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a9 01       	movw	r20, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_readPin+0x7e>
    177c:	55 95       	asr	r21
    177e:	47 95       	ror	r20
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_readPin+0x7a>
    1784:	ca 01       	movw	r24, r20
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	88 23       	and	r24, r24
    178c:	19 f0       	breq	.+6      	; 0x1794 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	49 c0       	rjmp	.+146    	; 0x1826 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1794:	19 82       	std	Y+1, r1	; 0x01
    1796:	47 c0       	rjmp	.+142    	; 0x1826 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1798:	e6 e3       	ldi	r30, 0x36	; 54
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_readPin+0xae>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_readPin+0xaa>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	90 70       	andi	r25, 0x00	; 0
    17ba:	88 23       	and	r24, r24
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	31 c0       	rjmp	.+98     	; 0x1826 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	2f c0       	rjmp	.+94     	; 0x1826 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17c8:	e3 e3       	ldi	r30, 0x33	; 51
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a9 01       	movw	r20, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_readPin+0xde>
    17dc:	55 95       	asr	r21
    17de:	47 95       	ror	r20
    17e0:	8a 95       	dec	r24
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_readPin+0xda>
    17e4:	ca 01       	movw	r24, r20
    17e6:	81 70       	andi	r24, 0x01	; 1
    17e8:	90 70       	andi	r25, 0x00	; 0
    17ea:	88 23       	and	r24, r24
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	19 c0       	rjmp	.+50     	; 0x1826 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	17 c0       	rjmp	.+46     	; 0x1826 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17f8:	e0 e3       	ldi	r30, 0x30	; 48
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a9 01       	movw	r20, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_readPin+0x10e>
    180c:	55 95       	asr	r21
    180e:	47 95       	ror	r20
    1810:	8a 95       	dec	r24
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_readPin+0x10a>
    1814:	ca 01       	movw	r24, r20
    1816:	81 70       	andi	r24, 0x01	; 1
    1818:	90 70       	andi	r25, 0x00	; 0
    181a:	88 23       	and	r24, r24
    181c:	19 f0       	breq	.+6      	; 0x1824 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1824:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	00 d0       	rcall	.+0      	; 0x183e <GPIO_setupPortDirection+0x6>
    183e:	00 d0       	rcall	.+0      	; 0x1840 <GPIO_setupPortDirection+0x8>
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	90 f5       	brcc	.+100    	; 0x18b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3c 83       	std	Y+4, r19	; 0x04
    1856:	2b 83       	std	Y+3, r18	; 0x03
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	d1 f0       	breq	.+52     	; 0x1896 <GPIO_setupPortDirection+0x5e>
    1862:	2b 81       	ldd	r18, Y+3	; 0x03
    1864:	3c 81       	ldd	r19, Y+4	; 0x04
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <GPIO_setupPortDirection+0x3e>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <GPIO_setupPortDirection+0x54>
    1874:	1e c0       	rjmp	.+60     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <GPIO_setupPortDirection+0x68>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	81 f0       	breq	.+32     	; 0x18aa <GPIO_setupPortDirection+0x72>
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    188c:	ea e3       	ldi	r30, 0x3A	; 58
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	80 83       	st	Z, r24
    1894:	0e c0       	rjmp	.+28     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1896:	e7 e3       	ldi	r30, 0x37	; 55
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 83       	st	Z, r24
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18a0:	e4 e3       	ldi	r30, 0x34	; 52
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	80 83       	st	Z, r24
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18aa:	e1 e3       	ldi	r30, 0x31	; 49
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <GPIO_writePort+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <GPIO_writePort+0x8>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	90 f5       	brcc	.+100    	; 0x193a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3c 83       	std	Y+4, r19	; 0x04
    18de:	2b 83       	std	Y+3, r18	; 0x03
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	91 05       	cpc	r25, r1
    18e8:	d1 f0       	breq	.+52     	; 0x191e <GPIO_writePort+0x5e>
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	2c f4       	brge	.+10     	; 0x18fe <GPIO_writePort+0x3e>
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	61 f0       	breq	.+24     	; 0x1914 <GPIO_writePort+0x54>
    18fc:	1e c0       	rjmp	.+60     	; 0x193a <GPIO_writePort+0x7a>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	81 f0       	breq	.+32     	; 0x1928 <GPIO_writePort+0x68>
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	91 05       	cpc	r25, r1
    1910:	81 f0       	breq	.+32     	; 0x1932 <GPIO_writePort+0x72>
    1912:	13 c0       	rjmp	.+38     	; 0x193a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1914:	eb e3       	ldi	r30, 0x3B	; 59
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	80 83       	st	Z, r24
    191c:	0e c0       	rjmp	.+28     	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    191e:	e8 e3       	ldi	r30, 0x38	; 56
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	80 83       	st	Z, r24
    1926:	09 c0       	rjmp	.+18     	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1928:	e5 e3       	ldi	r30, 0x35	; 53
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	80 83       	st	Z, r24
    1930:	04 c0       	rjmp	.+8      	; 0x193a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1932:	e2 e3       	ldi	r30, 0x32	; 50
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	80 83       	st	Z, r24
			break;
		}
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <GPIO_readPort+0x6>
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_readPort+0x8>
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1956:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	90 f5       	brcc	.+100    	; 0x19c2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3c 83       	std	Y+4, r19	; 0x04
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	d1 f0       	breq	.+52     	; 0x19a6 <GPIO_readPort+0x5e>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	2c f4       	brge	.+10     	; 0x1986 <GPIO_readPort+0x3e>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	61 f0       	breq	.+24     	; 0x199c <GPIO_readPort+0x54>
    1984:	1e c0       	rjmp	.+60     	; 0x19c2 <GPIO_readPort+0x7a>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	81 f0       	breq	.+32     	; 0x19b0 <GPIO_readPort+0x68>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	81 f0       	breq	.+32     	; 0x19ba <GPIO_readPort+0x72>
    199a:	13 c0       	rjmp	.+38     	; 0x19c2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    199c:	e9 e3       	ldi	r30, 0x39	; 57
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	0e c0       	rjmp	.+28     	; 0x19c2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19a6:	e6 e3       	ldi	r30, 0x36	; 54
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	09 c0       	rjmp	.+18     	; 0x19c2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19b0:	e3 e3       	ldi	r30, 0x33	; 51
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19ba:	e0 e3       	ldi	r30, 0x30	; 48
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	60 97       	sbiw	r28, 0x10	; 16
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	63 e0       	ldi	r22, 0x03	; 3
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	64 e0       	ldi	r22, 0x04	; 4
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	65 e0       	ldi	r22, 0x05	; 5
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	66 e0       	ldi	r22, 0x06	; 6
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	67 e0       	ldi	r22, 0x07	; 7
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a3c:	b2 e4       	ldi	r27, 0x42	; 66
    1a3e:	8b 87       	std	Y+11, r24	; 0x0b
    1a40:	9c 87       	std	Y+12, r25	; 0x0c
    1a42:	ad 87       	std	Y+13, r26	; 0x0d
    1a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4a ef       	ldi	r20, 0xFA	; 250
    1a54:	54 e4       	ldi	r21, 0x44	; 68
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	8f 83       	std	Y+7, r24	; 0x07
    1a60:	98 87       	std	Y+8, r25	; 0x08
    1a62:	a9 87       	std	Y+9, r26	; 0x09
    1a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <KEYPAD_getPressedKey+0xb6>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	3f c0       	rjmp	.+126    	; 0x1b06 <KEYPAD_getPressedKey+0x134>
	else if (__tmp > 65535)
    1a88:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8a:	78 85       	ldd	r23, Y+8	; 0x08
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	3f ef       	ldi	r19, 0xFF	; 255
    1a94:	4f e7       	ldi	r20, 0x7F	; 127
    1a96:	57 e4       	ldi	r21, 0x47	; 71
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	4c f5       	brge	.+82     	; 0x1af2 <KEYPAD_getPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e2       	ldi	r20, 0x20	; 32
    1aae:	51 e4       	ldi	r21, 0x41	; 65
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	bc 01       	movw	r22, r24
    1aba:	cd 01       	movw	r24, r26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <KEYPAD_getPressedKey+0x116>
    1aca:	88 ec       	ldi	r24, 0xC8	; 200
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <KEYPAD_getPressedKey+0x104>
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	69 f7       	brne	.-38     	; 0x1aca <KEYPAD_getPressedKey+0xf8>
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <KEYPAD_getPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <KEYPAD_getPressedKey+0x140>
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
#endif
	while(1)
	{
		_delay_ms(100);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b1a:	1f 86       	std	Y+15, r1	; 0x0f
    1b1c:	39 c0       	rjmp	.+114    	; 0x1b90 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b22:	41 e0       	ldi	r20, 0x01	; 1
    1b24:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b32:	18 8a       	std	Y+16, r1	; 0x10
    1b34:	22 c0       	rjmp	.+68     	; 0x1b7a <KEYPAD_getPressedKey+0x1a8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	98 2f       	mov	r25, r24
    1b3a:	9c 5f       	subi	r25, 0xFC	; 252
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	69 2f       	mov	r22, r25
    1b40:	0e 94 81 0b 	call	0x1702	; 0x1702 <GPIO_readPin>
    1b44:	88 23       	and	r24, r24
    1b46:	b1 f4       	brne	.+44     	; 0x1b74 <KEYPAD_getPressedKey+0x1a2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4a:	88 2f       	mov	r24, r24
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	98 2f       	mov	r25, r24
    1b58:	88 89       	ldd	r24, Y+16	; 0x10
    1b5a:	89 0f       	add	r24, r25
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1b62:	60 96       	adiw	r28, 0x10	; 16
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b74:	88 89       	ldd	r24, Y+16	; 0x10
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	88 8b       	std	Y+16, r24	; 0x10
    1b7a:	88 89       	ldd	r24, Y+16	; 0x10
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	d8 f2       	brcs	.-74     	; 0x1b36 <KEYPAD_getPressedKey+0x164>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		_delay_ms(100);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	20 f2       	brcs	.-120    	; 0x1b1e <KEYPAD_getPressedKey+0x14c>
    1b96:	4f cf       	rjmp	.-354    	; 0x1a36 <KEYPAD_getPressedKey+0x64>

00001b98 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ba6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3c 83       	std	Y+4, r19	; 0x04
    1bb0:	2b 83       	std	Y+3, r18	; 0x03
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	88 30       	cpi	r24, 0x08	; 8
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x26>
    1bbc:	70 c0       	rjmp	.+224    	; 0x1c9e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	29 30       	cpi	r18, 0x09	; 9
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	5c f5       	brge	.+86     	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	84 30       	cpi	r24, 0x04	; 4
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bd2:	59 c0       	rjmp	.+178    	; 0x1c86 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd8:	25 30       	cpi	r18, 0x05	; 5
    1bda:	31 05       	cpc	r19, r1
    1bdc:	9c f4       	brge	.+38     	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <KEYPAD_4x4_adjustKeyNumber+0x52>
    1be8:	48 c0       	rjmp	.+144    	; 0x1c7a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bea:	2b 81       	ldd	r18, Y+3	; 0x03
    1bec:	3c 81       	ldd	r19, Y+4	; 0x04
    1bee:	23 30       	cpi	r18, 0x03	; 3
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bf4:	45 c0       	rjmp	.+138    	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c00:	39 c0       	rjmp	.+114    	; 0x1c74 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c02:	67 c0       	rjmp	.+206    	; 0x1cd2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	26 30       	cpi	r18, 0x06	; 6
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c0e:	41 c0       	rjmp	.+130    	; 0x1c92 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	87 30       	cpi	r24, 0x07	; 7
    1c16:	91 05       	cpc	r25, r1
    1c18:	0c f0       	brlt	.+2      	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c1a:	3e c0       	rjmp	.+124    	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c1c:	37 c0       	rjmp	.+110    	; 0x1c8c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c20:	3c 81       	ldd	r19, Y+4	; 0x04
    1c22:	2c 30       	cpi	r18, 0x0C	; 12
    1c24:	31 05       	cpc	r19, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c28:	46 c0       	rjmp	.+140    	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	8d 30       	cpi	r24, 0x0D	; 13
    1c30:	91 05       	cpc	r25, r1
    1c32:	5c f4       	brge	.+22     	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c34:	2b 81       	ldd	r18, Y+3	; 0x03
    1c36:	3c 81       	ldd	r19, Y+4	; 0x04
    1c38:	2a 30       	cpi	r18, 0x0A	; 10
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	b1 f1       	breq	.+108    	; 0x1caa <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	8b 30       	cpi	r24, 0x0B	; 11
    1c44:	91 05       	cpc	r25, r1
    1c46:	a4 f5       	brge	.+104    	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c48:	2d c0       	rjmp	.+90     	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	2e 30       	cpi	r18, 0x0E	; 14
    1c50:	31 05       	cpc	r19, r1
    1c52:	b9 f1       	breq	.+110    	; 0x1cc2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	8e 30       	cpi	r24, 0x0E	; 14
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	7c f1       	brlt	.+94     	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	3c 81       	ldd	r19, Y+4	; 0x04
    1c62:	2f 30       	cpi	r18, 0x0F	; 15
    1c64:	31 05       	cpc	r19, r1
    1c66:	79 f1       	breq	.+94     	; 0x1cc6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	80 31       	cpi	r24, 0x10	; 16
    1c6e:	91 05       	cpc	r25, r1
    1c70:	69 f1       	breq	.+90     	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c72:	2f c0       	rjmp	.+94     	; 0x1cd2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c74:	87 e0       	ldi	r24, 0x07	; 7
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	2e c0       	rjmp	.+92     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c7a:	88 e0       	ldi	r24, 0x08	; 8
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	2b c0       	rjmp	.+86     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	28 c0       	rjmp	.+80     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c86:	85 e2       	ldi	r24, 0x25	; 37
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	25 c0       	rjmp	.+74     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	22 c0       	rjmp	.+68     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c92:	85 e0       	ldi	r24, 0x05	; 5
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	1f c0       	rjmp	.+62     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c98:	86 e0       	ldi	r24, 0x06	; 6
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	1c c0       	rjmp	.+56     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c9e:	8a e2       	ldi	r24, 0x2A	; 42
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	19 c0       	rjmp	.+50     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	16 c0       	rjmp	.+44     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	13 c0       	rjmp	.+38     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	10 c0       	rjmp	.+32     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cb6:	8d e2       	ldi	r24, 0x2D	; 45
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	0d c0       	rjmp	.+26     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1cbc:	8d e0       	ldi	r24, 0x0D	; 13
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	08 c0       	rjmp	.+16     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1cc6:	8d e3       	ldi	r24, 0x3D	; 61
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ccc:	8b e2       	ldi	r24, 0x2B	; 43
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	67 e0       	ldi	r22, 0x07	; 7
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	65 e0       	ldi	r22, 0x05	; 5
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 ea       	ldi	r26, 0xA0	; 160
    1d14:	b1 e4       	ldi	r27, 0x41	; 65
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
    1d18:	9c 87       	std	Y+12, r25	; 0x0c
    1d1a:	ad 87       	std	Y+13, r26	; 0x0d
    1d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a ef       	ldi	r20, 0xFA	; 250
    1d2c:	54 e4       	ldi	r21, 0x44	; 68
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8f 83       	std	Y+7, r24	; 0x07
    1d38:	98 87       	std	Y+8, r25	; 0x08
    1d3a:	a9 87       	std	Y+9, r26	; 0x09
    1d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_init+0x7a>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_init+0xda>
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_init+0xc8>
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_init+0xbc>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_init+0x104>
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	6f ef       	ldi	r22, 0xFF	; 255
    1df6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1dfa:	88 e3       	ldi	r24, 0x38	; 56
    1dfc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e00:	8c e0       	ldi	r24, 0x0C	; 12
    1e02:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    1e0c:	2e 96       	adiw	r28, 0x0e	; 14
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	e9 97       	sbiw	r28, 0x39	; 57
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e34:	83 e0       	ldi	r24, 0x03	; 3
    1e36:	67 e0       	ldi	r22, 0x07	; 7
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	8d ab       	std	Y+53, r24	; 0x35
    1e48:	9e ab       	std	Y+54, r25	; 0x36
    1e4a:	af ab       	std	Y+55, r26	; 0x37
    1e4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e50:	7e a9       	ldd	r23, Y+54	; 0x36
    1e52:	8f a9       	ldd	r24, Y+55	; 0x37
    1e54:	98 ad       	ldd	r25, Y+56	; 0x38
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a ef       	ldi	r20, 0xFA	; 250
    1e5c:	54 e4       	ldi	r21, 0x44	; 68
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	89 ab       	std	Y+49, r24	; 0x31
    1e68:	9a ab       	std	Y+50, r25	; 0x32
    1e6a:	ab ab       	std	Y+51, r26	; 0x33
    1e6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e70:	7a a9       	ldd	r23, Y+50	; 0x32
    1e72:	8b a9       	ldd	r24, Y+51	; 0x33
    1e74:	9c a9       	ldd	r25, Y+52	; 0x34
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	3f c0       	rjmp	.+126    	; 0x1f0e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e90:	69 a9       	ldd	r22, Y+49	; 0x31
    1e92:	7a a9       	ldd	r23, Y+50	; 0x32
    1e94:	8b a9       	ldd	r24, Y+51	; 0x33
    1e96:	9c a9       	ldd	r25, Y+52	; 0x34
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	4c f5       	brge	.+82     	; 0x1efa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1eac:	8f a9       	ldd	r24, Y+55	; 0x37
    1eae:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e2       	ldi	r20, 0x20	; 32
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	98 ab       	std	Y+48, r25	; 0x30
    1ece:	8f a7       	std	Y+47, r24	; 0x2f
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <LCD_sendCommand+0xd2>
    1ed2:	88 ec       	ldi	r24, 0xC8	; 200
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9e a7       	std	Y+46, r25	; 0x2e
    1ed8:	8d a7       	std	Y+45, r24	; 0x2d
    1eda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1edc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_sendCommand+0xc0>
    1ee2:	9e a7       	std	Y+46, r25	; 0x2e
    1ee4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	98 ab       	std	Y+48, r25	; 0x30
    1eee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <LCD_sendCommand+0xb4>
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efa:	69 a9       	ldd	r22, Y+49	; 0x31
    1efc:	7a a9       	ldd	r23, Y+50	; 0x32
    1efe:	8b a9       	ldd	r24, Y+51	; 0x33
    1f00:	9c a9       	ldd	r25, Y+52	; 0x34
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	98 ab       	std	Y+48, r25	; 0x30
    1f0c:	8f a7       	std	Y+47, r24	; 0x2f
    1f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f10:	98 a9       	ldd	r25, Y+48	; 0x30
    1f12:	9c a7       	std	Y+44, r25	; 0x2c
    1f14:	8b a7       	std	Y+43, r24	; 0x2b
    1f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_sendCommand+0xfc>
    1f1e:	9c a7       	std	Y+44, r25	; 0x2c
    1f20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	65 e0       	ldi	r22, 0x05	; 5
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	a0 e8       	ldi	r26, 0x80	; 128
    1f32:	bf e3       	ldi	r27, 0x3F	; 63
    1f34:	8f a3       	std	Y+39, r24	; 0x27
    1f36:	98 a7       	std	Y+40, r25	; 0x28
    1f38:	a9 a7       	std	Y+41, r26	; 0x29
    1f3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f40:	89 a5       	ldd	r24, Y+41	; 0x29
    1f42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a ef       	ldi	r20, 0xFA	; 250
    1f4a:	54 e4       	ldi	r21, 0x44	; 68
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	8b a3       	std	Y+35, r24	; 0x23
    1f56:	9c a3       	std	Y+36, r25	; 0x24
    1f58:	ad a3       	std	Y+37, r26	; 0x25
    1f5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f60:	8d a1       	ldd	r24, Y+37	; 0x25
    1f62:	9e a1       	ldd	r25, Y+38	; 0x26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <LCD_sendCommand+0x160>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9a a3       	std	Y+34, r25	; 0x22
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	3f c0       	rjmp	.+126    	; 0x1ffc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f80:	7c a1       	ldd	r23, Y+36	; 0x24
    1f82:	8d a1       	ldd	r24, Y+37	; 0x25
    1f84:	9e a1       	ldd	r25, Y+38	; 0x26
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	4c f5       	brge	.+82     	; 0x1fe8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f96:	6f a1       	ldd	r22, Y+39	; 0x27
    1f98:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e2       	ldi	r20, 0x20	; 32
    1fa4:	51 e4       	ldi	r21, 0x41	; 65
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	bc 01       	movw	r22, r24
    1fb0:	cd 01       	movw	r24, r26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <LCD_sendCommand+0x1c0>
    1fc0:	88 ec       	ldi	r24, 0xC8	; 200
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	98 a3       	std	Y+32, r25	; 0x20
    1fc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fca:	98 a1       	ldd	r25, Y+32	; 0x20
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_sendCommand+0x1ae>
    1fd0:	98 a3       	std	Y+32, r25	; 0x20
    1fd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	9a a3       	std	Y+34, r25	; 0x22
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	69 f7       	brne	.-38     	; 0x1fc0 <LCD_sendCommand+0x1a2>
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9a a3       	std	Y+34, r25	; 0x22
    1ffa:	89 a3       	std	Y+33, r24	; 0x21
    1ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    2000:	9e 8f       	std	Y+30, r25	; 0x1e
    2002:	8d 8f       	std	Y+29, r24	; 0x1d
    2004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2006:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_sendCommand+0x1ea>
    200c:	9e 8f       	std	Y+30, r25	; 0x1e
    200e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	69 ad       	ldd	r22, Y+57	; 0x39
    2014:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <GPIO_writePort>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e8       	ldi	r26, 0x80	; 128
    201e:	bf e3       	ldi	r27, 0x3F	; 63
    2020:	89 8f       	std	Y+25, r24	; 0x19
    2022:	9a 8f       	std	Y+26, r25	; 0x1a
    2024:	ab 8f       	std	Y+27, r26	; 0x1b
    2026:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	69 8d       	ldd	r22, Y+25	; 0x19
    202a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8d 8b       	std	Y+21, r24	; 0x15
    2042:	9e 8b       	std	Y+22, r25	; 0x16
    2044:	af 8b       	std	Y+23, r26	; 0x17
    2046:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	69 8d       	ldd	r22, Y+25	; 0x19
    2084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_sendCommand+0x2ac>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	89 8b       	std	Y+17, r24	; 0x11
    20b4:	89 89       	ldd	r24, Y+17	; 0x11
    20b6:	9a 89       	ldd	r25, Y+18	; 0x12
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x29a>
    20bc:	9a 8b       	std	Y+18, r25	; 0x12
    20be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_sendCommand+0x28e>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 8b       	std	Y+20, r25	; 0x14
    20e6:	8b 8b       	std	Y+19, r24	; 0x13
    20e8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ea:	9c 89       	ldd	r25, Y+20	; 0x14
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
    20f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f2:	98 89       	ldd	r25, Y+16	; 0x10
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_sendCommand+0x2d6>
    20f8:	98 8b       	std	Y+16, r25	; 0x10
    20fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	65 e0       	ldi	r22, 0x05	; 5
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_sendCommand+0x33a>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_sendCommand+0x39a>
    219a:	88 ec       	ldi	r24, 0xC8	; 200
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x388>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_sendCommand+0x37c>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x3c4>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21ea:	e9 96       	adiw	r28, 0x39	; 57
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	e9 97       	sbiw	r28, 0x39	; 57
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2212:	83 e0       	ldi	r24, 0x03	; 3
    2214:	67 e0       	ldi	r22, 0x07	; 7
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e8       	ldi	r26, 0x80	; 128
    2222:	bf e3       	ldi	r27, 0x3F	; 63
    2224:	8d ab       	std	Y+53, r24	; 0x35
    2226:	9e ab       	std	Y+54, r25	; 0x36
    2228:	af ab       	std	Y+55, r26	; 0x37
    222a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6d a9       	ldd	r22, Y+53	; 0x35
    222e:	7e a9       	ldd	r23, Y+54	; 0x36
    2230:	8f a9       	ldd	r24, Y+55	; 0x37
    2232:	98 ad       	ldd	r25, Y+56	; 0x38
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	89 ab       	std	Y+49, r24	; 0x31
    2246:	9a ab       	std	Y+50, r25	; 0x32
    2248:	ab ab       	std	Y+51, r26	; 0x33
    224a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    224c:	69 a9       	ldd	r22, Y+49	; 0x31
    224e:	7a a9       	ldd	r23, Y+50	; 0x32
    2250:	8b a9       	ldd	r24, Y+51	; 0x33
    2252:	9c a9       	ldd	r25, Y+52	; 0x34
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    226e:	69 a9       	ldd	r22, Y+49	; 0x31
    2270:	7a a9       	ldd	r23, Y+50	; 0x32
    2272:	8b a9       	ldd	r24, Y+51	; 0x33
    2274:	9c a9       	ldd	r25, Y+52	; 0x34
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6d a9       	ldd	r22, Y+53	; 0x35
    2288:	7e a9       	ldd	r23, Y+54	; 0x36
    228a:	8f a9       	ldd	r24, Y+55	; 0x37
    228c:	98 ad       	ldd	r25, Y+56	; 0x38
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	98 ab       	std	Y+48, r25	; 0x30
    22ac:	8f a7       	std	Y+47, r24	; 0x2f
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_displayCharacter+0xd2>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9e a7       	std	Y+46, r25	; 0x2e
    22b6:	8d a7       	std	Y+45, r24	; 0x2d
    22b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_displayCharacter+0xc0>
    22c0:	9e a7       	std	Y+46, r25	; 0x2e
    22c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	98 ab       	std	Y+48, r25	; 0x30
    22cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d0:	98 a9       	ldd	r25, Y+48	; 0x30
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_displayCharacter+0xb4>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	69 a9       	ldd	r22, Y+49	; 0x31
    22da:	7a a9       	ldd	r23, Y+50	; 0x32
    22dc:	8b a9       	ldd	r24, Y+51	; 0x33
    22de:	9c a9       	ldd	r25, Y+52	; 0x34
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	98 ab       	std	Y+48, r25	; 0x30
    22ea:	8f a7       	std	Y+47, r24	; 0x2f
    22ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ee:	98 a9       	ldd	r25, Y+48	; 0x30
    22f0:	9c a7       	std	Y+44, r25	; 0x2c
    22f2:	8b a7       	std	Y+43, r24	; 0x2b
    22f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_displayCharacter+0xfc>
    22fc:	9c a7       	std	Y+44, r25	; 0x2c
    22fe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	65 e0       	ldi	r22, 0x05	; 5
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 e8       	ldi	r26, 0x80	; 128
    2310:	bf e3       	ldi	r27, 0x3F	; 63
    2312:	8f a3       	std	Y+39, r24	; 0x27
    2314:	98 a7       	std	Y+40, r25	; 0x28
    2316:	a9 a7       	std	Y+41, r26	; 0x29
    2318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6f a1       	ldd	r22, Y+39	; 0x27
    231c:	78 a5       	ldd	r23, Y+40	; 0x28
    231e:	89 a5       	ldd	r24, Y+41	; 0x29
    2320:	9a a5       	ldd	r25, Y+42	; 0x2a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8b a3       	std	Y+35, r24	; 0x23
    2334:	9c a3       	std	Y+36, r25	; 0x24
    2336:	ad a3       	std	Y+37, r26	; 0x25
    2338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    233a:	6b a1       	ldd	r22, Y+35	; 0x23
    233c:	7c a1       	ldd	r23, Y+36	; 0x24
    233e:	8d a1       	ldd	r24, Y+37	; 0x25
    2340:	9e a1       	ldd	r25, Y+38	; 0x26
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
    235a:	3f c0       	rjmp	.+126    	; 0x23da <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    235c:	6b a1       	ldd	r22, Y+35	; 0x23
    235e:	7c a1       	ldd	r23, Y+36	; 0x24
    2360:	8d a1       	ldd	r24, Y+37	; 0x25
    2362:	9e a1       	ldd	r25, Y+38	; 0x26
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6f a1       	ldd	r22, Y+39	; 0x27
    2376:	78 a5       	ldd	r23, Y+40	; 0x28
    2378:	89 a5       	ldd	r24, Y+41	; 0x29
    237a:	9a a5       	ldd	r25, Y+42	; 0x2a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_displayCharacter+0x1c0>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	98 a3       	std	Y+32, r25	; 0x20
    23a4:	8f 8f       	std	Y+31, r24	; 0x1f
    23a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a8:	98 a1       	ldd	r25, Y+32	; 0x20
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_displayCharacter+0x1ae>
    23ae:	98 a3       	std	Y+32, r25	; 0x20
    23b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	89 a1       	ldd	r24, Y+33	; 0x21
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9a a3       	std	Y+34, r25	; 0x22
    23ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	89 a1       	ldd	r24, Y+33	; 0x21
    23be:	9a a1       	ldd	r25, Y+34	; 0x22
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_displayCharacter+0x1a2>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6b a1       	ldd	r22, Y+35	; 0x23
    23c8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ca:	8d a1       	ldd	r24, Y+37	; 0x25
    23cc:	9e a1       	ldd	r25, Y+38	; 0x26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
    23da:	89 a1       	ldd	r24, Y+33	; 0x21
    23dc:	9a a1       	ldd	r25, Y+34	; 0x22
    23de:	9e 8f       	std	Y+30, r25	; 0x1e
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
    23e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_displayCharacter+0x1ea>
    23ea:	9e 8f       	std	Y+30, r25	; 0x1e
    23ec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	69 ad       	ldd	r22, Y+57	; 0x39
    23f2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <GPIO_writePort>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a0 e8       	ldi	r26, 0x80	; 128
    23fc:	bf e3       	ldi	r27, 0x3F	; 63
    23fe:	89 8f       	std	Y+25, r24	; 0x19
    2400:	9a 8f       	std	Y+26, r25	; 0x1a
    2402:	ab 8f       	std	Y+27, r26	; 0x1b
    2404:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	69 8d       	ldd	r22, Y+25	; 0x19
    2408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a ef       	ldi	r20, 0xFA	; 250
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8d 8b       	std	Y+21, r24	; 0x15
    2420:	9e 8b       	std	Y+22, r25	; 0x16
    2422:	af 8b       	std	Y+23, r26	; 0x17
    2424:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2426:	6d 89       	ldd	r22, Y+21	; 0x15
    2428:	7e 89       	ldd	r23, Y+22	; 0x16
    242a:	8f 89       	ldd	r24, Y+23	; 0x17
    242c:	98 8d       	ldd	r25, Y+24	; 0x18
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9c 8b       	std	Y+20, r25	; 0x14
    2444:	8b 8b       	std	Y+19, r24	; 0x13
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	69 8d       	ldd	r22, Y+25	; 0x19
    2462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9c 8b       	std	Y+20, r25	; 0x14
    2486:	8b 8b       	std	Y+19, r24	; 0x13
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <LCD_displayCharacter+0x2ac>
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9a 8b       	std	Y+18, r25	; 0x12
    2490:	89 8b       	std	Y+17, r24	; 0x11
    2492:	89 89       	ldd	r24, Y+17	; 0x11
    2494:	9a 89       	ldd	r25, Y+18	; 0x12
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0x29a>
    249a:	9a 8b       	std	Y+18, r25	; 0x12
    249c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	8b 89       	ldd	r24, Y+19	; 0x13
    24a0:	9c 89       	ldd	r25, Y+20	; 0x14
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <LCD_displayCharacter+0x28e>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6d 89       	ldd	r22, Y+21	; 0x15
    24b4:	7e 89       	ldd	r23, Y+22	; 0x16
    24b6:	8f 89       	ldd	r24, Y+23	; 0x17
    24b8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9c 8b       	std	Y+20, r25	; 0x14
    24c4:	8b 8b       	std	Y+19, r24	; 0x13
    24c6:	8b 89       	ldd	r24, Y+19	; 0x13
    24c8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ca:	98 8b       	std	Y+16, r25	; 0x10
    24cc:	8f 87       	std	Y+15, r24	; 0x0f
    24ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d0:	98 89       	ldd	r25, Y+16	; 0x10
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_displayCharacter+0x2d6>
    24d6:	98 8b       	std	Y+16, r25	; 0x10
    24d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	65 e0       	ldi	r22, 0x05	; 5
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_writePin>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e8       	ldi	r26, 0x80	; 128
    24ea:	bf e3       	ldi	r27, 0x3F	; 63
    24ec:	8b 87       	std	Y+11, r24	; 0x0b
    24ee:	9c 87       	std	Y+12, r25	; 0x0c
    24f0:	ad 87       	std	Y+13, r26	; 0x0d
    24f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f 83       	std	Y+7, r24	; 0x07
    250e:	98 87       	std	Y+8, r25	; 0x08
    2510:	a9 87       	std	Y+9, r26	; 0x09
    2512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2550:	7c 85       	ldd	r23, Y+12	; 0x0c
    2552:	8d 85       	ldd	r24, Y+13	; 0x0d
    2554:	9e 85       	ldd	r25, Y+14	; 0x0e
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_displayCharacter+0x39a>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x388>
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_displayCharacter+0x37c>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_displayCharacter+0x3c4>
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25c8:	e9 96       	adiw	r28, 0x39	; 57
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_displayString+0x6>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25ea:	19 82       	std	Y+1, r1	; 0x01
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	fc 01       	movw	r30, r24
    25fa:	e2 0f       	add	r30, r18
    25fc:	f3 1f       	adc	r31, r19
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_displayCharacter>
		i++;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	39 f7       	brne	.-50     	; 0x25ee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <LCD_moveCursor+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_moveCursor+0x8>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	3d 83       	std	Y+5, r19	; 0x05
    2646:	2c 83       	std	Y+4, r18	; 0x04
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	c1 f0       	breq	.+48     	; 0x2682 <LCD_moveCursor+0x56>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	2c f4       	brge	.+10     	; 0x2666 <LCD_moveCursor+0x3a>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	61 f0       	breq	.+24     	; 0x267c <LCD_moveCursor+0x50>
    2664:	19 c0       	rjmp	.+50     	; 0x2698 <LCD_moveCursor+0x6c>
    2666:	2c 81       	ldd	r18, Y+4	; 0x04
    2668:	3d 81       	ldd	r19, Y+5	; 0x05
    266a:	22 30       	cpi	r18, 0x02	; 2
    266c:	31 05       	cpc	r19, r1
    266e:	69 f0       	breq	.+26     	; 0x268a <LCD_moveCursor+0x5e>
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	9d 81       	ldd	r25, Y+5	; 0x05
    2674:	83 30       	cpi	r24, 0x03	; 3
    2676:	91 05       	cpc	r25, r1
    2678:	61 f0       	breq	.+24     	; 0x2692 <LCD_moveCursor+0x66>
    267a:	0e c0       	rjmp	.+28     	; 0x2698 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	0b c0       	rjmp	.+22     	; 0x2698 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	80 5c       	subi	r24, 0xC0	; 192
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	80 5f       	subi	r24, 0xF0	; 240
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	80 5b       	subi	r24, 0xB0	; 176
    2696:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	80 68       	ori	r24, 0x80	; 128
    269c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <LCD_displayStringRowColumn+0x6>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <LCD_displayStringRowColumn+0x8>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	6a 83       	std	Y+2, r22	; 0x02
    26c0:	5c 83       	std	Y+4, r21	; 0x04
    26c2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	6a 81       	ldd	r22, Y+2	; 0x02
    26c8:	0e 94 16 13 	call	0x262c	; 0x262c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	62 97       	sbiw	r28, 0x12	; 18
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	9a 8b       	std	Y+18, r25	; 0x12
    26f8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	9a 89       	ldd	r25, Y+18	; 0x12
    26fe:	9e 01       	movw	r18, r28
    2700:	2f 5f       	subi	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	b9 01       	movw	r22, r18
    2706:	4a e0       	ldi	r20, 0x0A	; 10
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	0e 94 c0 18 	call	0x3180	; 0x3180 <itoa>
   LCD_displayString(buff); /* Display the string */
    270e:	ce 01       	movw	r24, r28
    2710:	01 96       	adiw	r24, 0x01	; 1
    2712:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_displayString>
}
    2716:	62 96       	adiw	r28, 0x12	; 18
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_sendCommand>
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	2f 93       	push	r18
    2748:	3f 93       	push	r19
    274a:	4f 93       	push	r20
    274c:	5f 93       	push	r21
    274e:	6f 93       	push	r22
    2750:	7f 93       	push	r23
    2752:	8f 93       	push	r24
    2754:	9f 93       	push	r25
    2756:	af 93       	push	r26
    2758:	bf 93       	push	r27
    275a:	ef 93       	push	r30
    275c:	ff 93       	push	r31
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    2766:	80 91 0b 01 	lds	r24, 0x010B
    276a:	90 91 0c 01 	lds	r25, 0x010C
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	29 f0       	breq	.+10     	; 0x277c <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2772:	e0 91 0b 01 	lds	r30, 0x010B
    2776:	f0 91 0c 01 	lds	r31, 0x010C
    277a:	09 95       	icall
	}
}
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	ff 91       	pop	r31
    2782:	ef 91       	pop	r30
    2784:	bf 91       	pop	r27
    2786:	af 91       	pop	r26
    2788:	9f 91       	pop	r25
    278a:	8f 91       	pop	r24
    278c:	7f 91       	pop	r23
    278e:	6f 91       	pop	r22
    2790:	5f 91       	pop	r21
    2792:	4f 91       	pop	r20
    2794:	3f 91       	pop	r19
    2796:	2f 91       	pop	r18
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63
    279c:	0f 90       	pop	r0
    279e:	1f 90       	pop	r1
    27a0:	18 95       	reti

000027a2 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    27a2:	1f 92       	push	r1
    27a4:	0f 92       	push	r0
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	0f 92       	push	r0
    27aa:	11 24       	eor	r1, r1
    27ac:	2f 93       	push	r18
    27ae:	3f 93       	push	r19
    27b0:	4f 93       	push	r20
    27b2:	5f 93       	push	r21
    27b4:	6f 93       	push	r22
    27b6:	7f 93       	push	r23
    27b8:	8f 93       	push	r24
    27ba:	9f 93       	push	r25
    27bc:	af 93       	push	r26
    27be:	bf 93       	push	r27
    27c0:	ef 93       	push	r30
    27c2:	ff 93       	push	r31
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    27cc:	80 91 0b 01 	lds	r24, 0x010B
    27d0:	90 91 0c 01 	lds	r25, 0x010C
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	29 f0       	breq	.+10     	; 0x27e2 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27d8:	e0 91 0b 01 	lds	r30, 0x010B
    27dc:	f0 91 0c 01 	lds	r31, 0x010C
    27e0:	09 95       	icall
	}
}
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	ff 91       	pop	r31
    27e8:	ef 91       	pop	r30
    27ea:	bf 91       	pop	r27
    27ec:	af 91       	pop	r26
    27ee:	9f 91       	pop	r25
    27f0:	8f 91       	pop	r24
    27f2:	7f 91       	pop	r23
    27f4:	6f 91       	pop	r22
    27f6:	5f 91       	pop	r21
    27f8:	4f 91       	pop	r20
    27fa:	3f 91       	pop	r19
    27fc:	2f 91       	pop	r18
    27fe:	0f 90       	pop	r0
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	0f 90       	pop	r0
    2804:	1f 90       	pop	r1
    2806:	18 95       	reti

00002808 <Timer0_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <Timer0_init+0x6>
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=(TCCR0 & 0xBF)|((Config_Ptr->mode & 0x01)<<6);
    2816:	a3 e5       	ldi	r26, 0x53	; 83
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e3 e5       	ldi	r30, 0x53	; 83
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	28 2f       	mov	r18, r24
    2822:	2f 7b       	andi	r18, 0xBF	; 191
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	83 81       	ldd	r24, Z+3	; 0x03
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	81 70       	andi	r24, 0x01	; 1
    2830:	90 70       	andi	r25, 0x00	; 0
    2832:	00 24       	eor	r0, r0
    2834:	96 95       	lsr	r25
    2836:	87 95       	ror	r24
    2838:	07 94       	ror	r0
    283a:	96 95       	lsr	r25
    283c:	87 95       	ror	r24
    283e:	07 94       	ror	r0
    2840:	98 2f       	mov	r25, r24
    2842:	80 2d       	mov	r24, r0
    2844:	82 2b       	or	r24, r18
    2846:	8c 93       	st	X, r24
	TCCR0=(TCCR0 & 0xF7)|((Config_Ptr->mode & 0x02)<<2);  //configure mode of timer
    2848:	a3 e5       	ldi	r26, 0x53	; 83
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e3 e5       	ldi	r30, 0x53	; 83
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	28 2f       	mov	r18, r24
    2854:	27 7f       	andi	r18, 0xF7	; 247
    2856:	e9 81       	ldd	r30, Y+1	; 0x01
    2858:	fa 81       	ldd	r31, Y+2	; 0x02
    285a:	83 81       	ldd	r24, Z+3	; 0x03
    285c:	88 2f       	mov	r24, r24
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	82 70       	andi	r24, 0x02	; 2
    2862:	90 70       	andi	r25, 0x00	; 0
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	82 2b       	or	r24, r18
    286e:	8c 93       	st	X, r24


	TCCR0=(TCCR0 & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    2870:	a3 e5       	ldi	r26, 0x53	; 83
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e3 e5       	ldi	r30, 0x53	; 83
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	98 2f       	mov	r25, r24
    287c:	98 7f       	andi	r25, 0xF8	; 248
    287e:	e9 81       	ldd	r30, Y+1	; 0x01
    2880:	fa 81       	ldd	r31, Y+2	; 0x02
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	87 70       	andi	r24, 0x07	; 7
    2886:	89 2b       	or	r24, r25
    2888:	8c 93       	st	X, r24

	TCNT0=Config_Ptr->initial_value; //define initial value
    288a:	a2 e5       	ldi	r26, 0x52	; 82
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e9 81       	ldd	r30, Y+1	; 0x01
    2890:	fa 81       	ldd	r31, Y+2	; 0x02
    2892:	80 81       	ld	r24, Z
    2894:	8c 93       	st	X, r24

	if((Config_Ptr->mode!=NORM_T0)&&(Config_Ptr->mode!=CTC_T0))
    2896:	e9 81       	ldd	r30, Y+1	; 0x01
    2898:	fa 81       	ldd	r31, Y+2	; 0x02
    289a:	83 81       	ldd	r24, Z+3	; 0x03
    289c:	88 23       	and	r24, r24
    289e:	51 f0       	breq	.+20     	; 0x28b4 <Timer0_init+0xac>
    28a0:	e9 81       	ldd	r30, Y+1	; 0x01
    28a2:	fa 81       	ldd	r31, Y+2	; 0x02
    28a4:	83 81       	ldd	r24, Z+3	; 0x03
    28a6:	82 30       	cpi	r24, 0x02	; 2
    28a8:	29 f0       	breq	.+10     	; 0x28b4 <Timer0_init+0xac>
	{
			GPIO_setupPinDirection(PWM_T0_ENABLE_PORT_ID,PWM_T0_ENABLE_PIN_ID,PIN_OUTPUT); //set pwm pin as output
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	63 e0       	ldi	r22, 0x03	; 3
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
	}

	if(Config_Ptr->mode!=NORM_T0)
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	83 81       	ldd	r24, Z+3	; 0x03
    28ba:	88 23       	and	r24, r24
    28bc:	21 f1       	breq	.+72     	; 0x2906 <Timer0_init+0xfe>
	{
		TCCR0=(TCCR0 & 0XCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    28be:	a3 e5       	ldi	r26, 0x53	; 83
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e3 e5       	ldi	r30, 0x53	; 83
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	28 2f       	mov	r18, r24
    28ca:	2f 7c       	andi	r18, 0xCF	; 207
    28cc:	e9 81       	ldd	r30, Y+1	; 0x01
    28ce:	fa 81       	ldd	r31, Y+2	; 0x02
    28d0:	84 81       	ldd	r24, Z+4	; 0x04
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	83 70       	andi	r24, 0x03	; 3
    28d8:	90 70       	andi	r25, 0x00	; 0
    28da:	82 95       	swap	r24
    28dc:	92 95       	swap	r25
    28de:	90 7f       	andi	r25, 0xF0	; 240
    28e0:	98 27       	eor	r25, r24
    28e2:	80 7f       	andi	r24, 0xF0	; 240
    28e4:	98 27       	eor	r25, r24
    28e6:	82 2b       	or	r24, r18
    28e8:	8c 93       	st	X, r24
		OCR0=Config_Ptr->compare_value; //define compare value
    28ea:	ac e5       	ldi	r26, 0x5C	; 92
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e9 81       	ldd	r30, Y+1	; 0x01
    28f0:	fa 81       	ldd	r31, Y+2	; 0x02
    28f2:	81 81       	ldd	r24, Z+1	; 0x01
    28f4:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0); //enable compare interrupt
    28f6:	a9 e5       	ldi	r26, 0x59	; 89
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e9 e5       	ldi	r30, 0x59	; 89
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	82 60       	ori	r24, 0x02	; 2
    2902:	8c 93       	st	X, r24
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <Timer0_init+0x10c>
	}
	else
	{
		SET_BIT(TIMSK,TOIE0); //enable overflow interrupt
    2906:	a9 e5       	ldi	r26, 0x59	; 89
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e9 e5       	ldi	r30, 0x59	; 89
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	81 60       	ori	r24, 0x01	; 1
    2912:	8c 93       	st	X, r24
	}
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <Timer0_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer0_deInit(void)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2926:	e3 e5       	ldi	r30, 0x53	; 83
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	10 82       	st	Z, r1
	TCNT0=0;
    292c:	e2 e5       	ldi	r30, 0x52	; 82
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	10 82       	st	Z, r1
	OCR0=0;
    2932:	ec e5       	ldi	r30, 0x5C	; 92
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    2938:	a9 e5       	ldi	r26, 0x59	; 89
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e9 e5       	ldi	r30, 0x59	; 89
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8d 7f       	andi	r24, 0xFD	; 253
    2944:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    2946:	a9 e5       	ldi	r26, 0x59	; 89
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e9 e5       	ldi	r30, 0x59	; 89
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	8e 7f       	andi	r24, 0xFE	; 254
    2952:	8c 93       	st	X, r24
}
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <Timer0_setCallBack+0x6>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T0 = a_ptr;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	90 93 0c 01 	sts	0x010C, r25
    2970:	80 93 0b 01 	sts	0x010B, r24
}
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <Timer0_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer0_pwmAdjust(uint8 duty_cycle)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <Timer0_pwmAdjust+0x6>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <Timer0_pwmAdjust+0x8>
    2986:	00 d0       	rcall	.+0      	; 0x2988 <Timer0_pwmAdjust+0xa>
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	8e 83       	std	Y+6, r24	; 0x06
	duty_cycle  = (uint8)(((uint16)255*duty_cycle)/100); //define compare value
    298e:	8e 81       	ldd	r24, Y+6	; 0x06
    2990:	48 2f       	mov	r20, r24
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	ca 01       	movw	r24, r20
    2996:	9c 01       	movw	r18, r24
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	c9 01       	movw	r24, r18
    299e:	96 95       	lsr	r25
    29a0:	98 2f       	mov	r25, r24
    29a2:	88 27       	eor	r24, r24
    29a4:	97 95       	ror	r25
    29a6:	87 95       	ror	r24
    29a8:	82 1b       	sub	r24, r18
    29aa:	93 0b       	sbc	r25, r19
    29ac:	84 0f       	add	r24, r20
    29ae:	95 1f       	adc	r25, r21
    29b0:	24 e6       	ldi	r18, 0x64	; 100
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	b9 01       	movw	r22, r18
    29b6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodhi4>
    29ba:	cb 01       	movw	r24, r22
    29bc:	8e 83       	std	Y+6, r24	; 0x06
	Timer0_ConfigType ConfigPTR={0,duty_cycle,PS_8_T0,FAST_PWM_T0,CLEAR_T0}; //initialize timer as desired
    29be:	19 82       	std	Y+1, r1	; 0x01
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	8a 83       	std	Y+2, r24	; 0x02
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	8b 83       	std	Y+3, r24	; 0x03
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	8c 83       	std	Y+4, r24	; 0x04
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	8d 83       	std	Y+5, r24	; 0x05
	Timer0_init(&ConfigPTR);
    29d0:	ce 01       	movw	r24, r28
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	0e 94 04 14 	call	0x2808	; 0x2808 <Timer0_init>
}
    29d8:	26 96       	adiw	r28, 0x06	; 6
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    2a14:	80 91 0d 01 	lds	r24, 0x010D
    2a18:	90 91 0e 01 	lds	r25, 0x010E
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	29 f0       	breq	.+10     	; 0x2a2a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a20:	e0 91 0d 01 	lds	r30, 0x010D
    2a24:	f0 91 0e 01 	lds	r31, 0x010E
    2a28:	09 95       	icall
	}
}
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	ff 91       	pop	r31
    2a30:	ef 91       	pop	r30
    2a32:	bf 91       	pop	r27
    2a34:	af 91       	pop	r26
    2a36:	9f 91       	pop	r25
    2a38:	8f 91       	pop	r24
    2a3a:	7f 91       	pop	r23
    2a3c:	6f 91       	pop	r22
    2a3e:	5f 91       	pop	r21
    2a40:	4f 91       	pop	r20
    2a42:	3f 91       	pop	r19
    2a44:	2f 91       	pop	r18
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti

00002a50 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    2a50:	1f 92       	push	r1
    2a52:	0f 92       	push	r0
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	0f 92       	push	r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	2f 93       	push	r18
    2a5c:	3f 93       	push	r19
    2a5e:	4f 93       	push	r20
    2a60:	5f 93       	push	r21
    2a62:	6f 93       	push	r22
    2a64:	7f 93       	push	r23
    2a66:	8f 93       	push	r24
    2a68:	9f 93       	push	r25
    2a6a:	af 93       	push	r26
    2a6c:	bf 93       	push	r27
    2a6e:	ef 93       	push	r30
    2a70:	ff 93       	push	r31
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    2a7a:	80 91 0d 01 	lds	r24, 0x010D
    2a7e:	90 91 0e 01 	lds	r25, 0x010E
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	29 f0       	breq	.+10     	; 0x2a90 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a86:	e0 91 0d 01 	lds	r30, 0x010D
    2a8a:	f0 91 0e 01 	lds	r31, 0x010E
    2a8e:	09 95       	icall
	}
}
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	ff 91       	pop	r31
    2a96:	ef 91       	pop	r30
    2a98:	bf 91       	pop	r27
    2a9a:	af 91       	pop	r26
    2a9c:	9f 91       	pop	r25
    2a9e:	8f 91       	pop	r24
    2aa0:	7f 91       	pop	r23
    2aa2:	6f 91       	pop	r22
    2aa4:	5f 91       	pop	r21
    2aa6:	4f 91       	pop	r20
    2aa8:	3f 91       	pop	r19
    2aaa:	2f 91       	pop	r18
    2aac:	0f 90       	pop	r0
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	0f 90       	pop	r0
    2ab2:	1f 90       	pop	r1
    2ab4:	18 95       	reti

00002ab6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2ab6:	1f 92       	push	r1
    2ab8:	0f 92       	push	r0
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	0f 92       	push	r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	2f 93       	push	r18
    2ac2:	3f 93       	push	r19
    2ac4:	4f 93       	push	r20
    2ac6:	5f 93       	push	r21
    2ac8:	6f 93       	push	r22
    2aca:	7f 93       	push	r23
    2acc:	8f 93       	push	r24
    2ace:	9f 93       	push	r25
    2ad0:	af 93       	push	r26
    2ad2:	bf 93       	push	r27
    2ad4:	ef 93       	push	r30
    2ad6:	ff 93       	push	r31
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    2ae0:	80 91 0d 01 	lds	r24, 0x010D
    2ae4:	90 91 0e 01 	lds	r25, 0x010E
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	29 f0       	breq	.+10     	; 0x2af6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2aec:	e0 91 0d 01 	lds	r30, 0x010D
    2af0:	f0 91 0e 01 	lds	r31, 0x010E
    2af4:	09 95       	icall
	}
}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	bf 91       	pop	r27
    2b00:	af 91       	pop	r26
    2b02:	9f 91       	pop	r25
    2b04:	8f 91       	pop	r24
    2b06:	7f 91       	pop	r23
    2b08:	6f 91       	pop	r22
    2b0a:	5f 91       	pop	r21
    2b0c:	4f 91       	pop	r20
    2b0e:	3f 91       	pop	r19
    2b10:	2f 91       	pop	r18
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	0f 90       	pop	r0
    2b18:	1f 90       	pop	r1
    2b1a:	18 95       	reti

00002b1c <Timer1_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <Timer1_init+0x6>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=(TCCR1A & 0xFC)|(Config_Ptr->mode & 0x03); //configure timer mode
    2b2a:	af e4       	ldi	r26, 0x4F	; 79
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	ef e4       	ldi	r30, 0x4F	; 79
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	98 2f       	mov	r25, r24
    2b36:	9c 7f       	andi	r25, 0xFC	; 252
    2b38:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3c:	85 81       	ldd	r24, Z+5	; 0x05
    2b3e:	83 70       	andi	r24, 0x03	; 3
    2b40:	89 2b       	or	r24, r25
    2b42:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0XE7)|((Config_Ptr->mode & 0x0C)<<1);
    2b44:	ae e4       	ldi	r26, 0x4E	; 78
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ee e4       	ldi	r30, 0x4E	; 78
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	28 2f       	mov	r18, r24
    2b50:	27 7e       	andi	r18, 0xE7	; 231
    2b52:	e9 81       	ldd	r30, Y+1	; 0x01
    2b54:	fa 81       	ldd	r31, Y+2	; 0x02
    2b56:	85 81       	ldd	r24, Z+5	; 0x05
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	8c 70       	andi	r24, 0x0C	; 12
    2b5e:	90 70       	andi	r25, 0x00	; 0
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	82 2b       	or	r24, r18
    2b66:	8c 93       	st	X, r24

	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    2b68:	ae e4       	ldi	r26, 0x4E	; 78
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	ee e4       	ldi	r30, 0x4E	; 78
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	98 2f       	mov	r25, r24
    2b74:	98 7f       	andi	r25, 0xF8	; 248
    2b76:	e9 81       	ldd	r30, Y+1	; 0x01
    2b78:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7a:	84 81       	ldd	r24, Z+4	; 0x04
    2b7c:	87 70       	andi	r24, 0x07	; 7
    2b7e:	89 2b       	or	r24, r25
    2b80:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; //define initial value
    2b82:	ac e4       	ldi	r26, 0x4C	; 76
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	11 96       	adiw	r26, 0x01	; 1
    2b90:	9c 93       	st	X, r25
    2b92:	8e 93       	st	-X, r24


	//define pwm pin as output
	if((Config_Ptr->mode!=NORM_T1)&&(Config_Ptr->mode!=CTC_OCR_T1)&&(Config_Ptr->mode!=CTC_ICR_T1))
    2b94:	e9 81       	ldd	r30, Y+1	; 0x01
    2b96:	fa 81       	ldd	r31, Y+2	; 0x02
    2b98:	85 81       	ldd	r24, Z+5	; 0x05
    2b9a:	88 23       	and	r24, r24
    2b9c:	f9 f0       	breq	.+62     	; 0x2bdc <Timer1_init+0xc0>
    2b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba2:	85 81       	ldd	r24, Z+5	; 0x05
    2ba4:	84 30       	cpi	r24, 0x04	; 4
    2ba6:	d1 f0       	breq	.+52     	; 0x2bdc <Timer1_init+0xc0>
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	85 81       	ldd	r24, Z+5	; 0x05
    2bae:	8c 30       	cpi	r24, 0x0C	; 12
    2bb0:	a9 f0       	breq	.+42     	; 0x2bdc <Timer1_init+0xc0>
	{
		if(Config_Ptr->index==TIMER1A)
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	86 81       	ldd	r24, Z+6	; 0x06
    2bb8:	81 30       	cpi	r24, 0x01	; 1
    2bba:	31 f4       	brne	.+12     	; 0x2bc8 <Timer1_init+0xac>
			{
			GPIO_setupPinDirection(PWM_T1A_ENABLE_PORT_ID,PWM_T1A_ENABLE_PIN_ID,PIN_OUTPUT);
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	65 e0       	ldi	r22, 0x05	; 5
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
    2bc6:	0a c0       	rjmp	.+20     	; 0x2bdc <Timer1_init+0xc0>
			}
			else if(Config_Ptr->index==TIMER1B)
    2bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bca:	fa 81       	ldd	r31, Y+2	; 0x02
    2bcc:	86 81       	ldd	r24, Z+6	; 0x06
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	29 f4       	brne	.+10     	; 0x2bdc <Timer1_init+0xc0>
			{
				GPIO_setupPinDirection(PWM_T1B_ENABLE_PORT_ID,PWM_T1B_ENABLE_PIN_ID,PIN_OUTPUT);
    2bd2:	83 e0       	ldi	r24, 0x03	; 3
    2bd4:	64 e0       	ldi	r22, 0x04	; 4
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	0e 94 ab 09 	call	0x1356	; 0x1356 <GPIO_setupPinDirection>
			}
	}

	if(Config_Ptr->mode!=NORM_T1)
    2bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bde:	fa 81       	ldd	r31, Y+2	; 0x02
    2be0:	85 81       	ldd	r24, Z+5	; 0x05
    2be2:	88 23       	and	r24, r24
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <Timer1_init+0xcc>
    2be6:	59 c0       	rjmp	.+178    	; 0x2c9a <Timer1_init+0x17e>
	{
		if(Config_Ptr->index==TIMER1A)
    2be8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bea:	fa 81       	ldd	r31, Y+2	; 0x02
    2bec:	86 81       	ldd	r24, Z+6	; 0x06
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	41 f5       	brne	.+80     	; 0x2c42 <Timer1_init+0x126>
			{
				TCCR1A=(TCCR1A & 0x3F)|((Config_Ptr->comp_match & 0x03)<<6); //set compare match event
    2bf2:	af e4       	ldi	r26, 0x4F	; 79
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ef e4       	ldi	r30, 0x4F	; 79
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	2f 73       	andi	r18, 0x3F	; 63
    2c00:	e9 81       	ldd	r30, Y+1	; 0x01
    2c02:	fa 81       	ldd	r31, Y+2	; 0x02
    2c04:	87 81       	ldd	r24, Z+7	; 0x07
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	00 24       	eor	r0, r0
    2c0c:	96 95       	lsr	r25
    2c0e:	87 95       	ror	r24
    2c10:	07 94       	ror	r0
    2c12:	96 95       	lsr	r25
    2c14:	87 95       	ror	r24
    2c16:	07 94       	ror	r0
    2c18:	98 2f       	mov	r25, r24
    2c1a:	80 2d       	mov	r24, r0
    2c1c:	82 2b       	or	r24, r18
    2c1e:	8c 93       	st	X, r24
				OCR1A=Config_Ptr->compare_value; //define compare value
    2c20:	aa e4       	ldi	r26, 0x4A	; 74
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e9 81       	ldd	r30, Y+1	; 0x01
    2c26:	fa 81       	ldd	r31, Y+2	; 0x02
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	11 96       	adiw	r26, 0x01	; 1
    2c2e:	9c 93       	st	X, r25
    2c30:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1A); //enable compare interrupt
    2c32:	a9 e5       	ldi	r26, 0x59	; 89
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 e5       	ldi	r30, 0x59	; 89
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 61       	ori	r24, 0x10	; 16
    2c3e:	8c 93       	st	X, r24
    2c40:	33 c0       	rjmp	.+102    	; 0x2ca8 <Timer1_init+0x18c>
			}
			else if(Config_Ptr->index==TIMER1B)
    2c42:	e9 81       	ldd	r30, Y+1	; 0x01
    2c44:	fa 81       	ldd	r31, Y+2	; 0x02
    2c46:	86 81       	ldd	r24, Z+6	; 0x06
    2c48:	82 30       	cpi	r24, 0x02	; 2
    2c4a:	71 f5       	brne	.+92     	; 0x2ca8 <Timer1_init+0x18c>
			{
				TCCR1A=(TCCR1A & 0xCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    2c4c:	af e4       	ldi	r26, 0x4F	; 79
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	ef e4       	ldi	r30, 0x4F	; 79
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	28 2f       	mov	r18, r24
    2c58:	2f 7c       	andi	r18, 0xCF	; 207
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	87 81       	ldd	r24, Z+7	; 0x07
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	83 70       	andi	r24, 0x03	; 3
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	82 95       	swap	r24
    2c6a:	92 95       	swap	r25
    2c6c:	90 7f       	andi	r25, 0xF0	; 240
    2c6e:	98 27       	eor	r25, r24
    2c70:	80 7f       	andi	r24, 0xF0	; 240
    2c72:	98 27       	eor	r25, r24
    2c74:	82 2b       	or	r24, r18
    2c76:	8c 93       	st	X, r24
				OCR1B=Config_Ptr->compare_value; //define compare value
    2c78:	a8 e4       	ldi	r26, 0x48	; 72
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	11 96       	adiw	r26, 0x01	; 1
    2c86:	9c 93       	st	X, r25
    2c88:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1B); //enable compare interrupt
    2c8a:	a9 e5       	ldi	r26, 0x59	; 89
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e9 e5       	ldi	r30, 0x59	; 89
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	88 60       	ori	r24, 0x08	; 8
    2c96:	8c 93       	st	X, r24
    2c98:	07 c0       	rjmp	.+14     	; 0x2ca8 <Timer1_init+0x18c>
			}
	}
	else
	{
		SET_BIT(TIMSK,TOIE1); //enable overflow interrupt
    2c9a:	a9 e5       	ldi	r26, 0x59	; 89
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e9 e5       	ldi	r30, 0x59	; 89
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	84 60       	ori	r24, 0x04	; 4
    2ca6:	8c 93       	st	X, r24
	}
}
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <Timer1_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer1_deInit(void)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2cba:	ef e4       	ldi	r30, 0x4F	; 79
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	10 82       	st	Z, r1
	TCCR1B=0;
    2cc0:	ee e4       	ldi	r30, 0x4E	; 78
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	10 82       	st	Z, r1
	TCNT1=0;
    2cc6:	ec e4       	ldi	r30, 0x4C	; 76
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	11 82       	std	Z+1, r1	; 0x01
    2ccc:	10 82       	st	Z, r1
	OCR1A=0;
    2cce:	ea e4       	ldi	r30, 0x4A	; 74
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	11 82       	std	Z+1, r1	; 0x01
    2cd4:	10 82       	st	Z, r1
	OCR1B=0;
    2cd6:	e8 e4       	ldi	r30, 0x48	; 72
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	11 82       	std	Z+1, r1	; 0x01
    2cdc:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    2cde:	a9 e5       	ldi	r26, 0x59	; 89
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e9 e5       	ldi	r30, 0x59	; 89
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8f 7e       	andi	r24, 0xEF	; 239
    2cea:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    2cec:	a9 e5       	ldi	r26, 0x59	; 89
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e9 e5       	ldi	r30, 0x59	; 89
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	87 7f       	andi	r24, 0xF7	; 247
    2cf8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    2cfa:	a9 e5       	ldi	r26, 0x59	; 89
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e9 e5       	ldi	r30, 0x59	; 89
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8b 7f       	andi	r24, 0xFB	; 251
    2d06:	8c 93       	st	X, r24
}
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <Timer1_setCallBack+0x6>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T1 = a_ptr;
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d20:	90 93 0e 01 	sts	0x010E, r25
    2d24:	80 93 0d 01 	sts	0x010D, r24
}
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <Timer1_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer1_pwmAdjust(uint16 duty_cycle)
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	2a 97       	sbiw	r28, 0x0a	; 10
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	9a 87       	std	Y+10, r25	; 0x0a
    2d48:	89 87       	std	Y+9, r24	; 0x09
	duty_cycle  = (uint16)(((uint32)65535*duty_cycle)/100); //define compare value
    2d4a:	89 85       	ldd	r24, Y+9	; 0x09
    2d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4e:	cc 01       	movw	r24, r24
    2d50:	a0 e0       	ldi	r26, 0x00	; 0
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	2f ef       	ldi	r18, 0xFF	; 255
    2d56:	3f ef       	ldi	r19, 0xFF	; 255
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 34 18 	call	0x3068	; 0x3068 <__mulsi3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	24 e6       	ldi	r18, 0x64	; 100
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 67 18 	call	0x30ce	; 0x30ce <__udivmodsi4>
    2d78:	da 01       	movw	r26, r20
    2d7a:	c9 01       	movw	r24, r18
    2d7c:	9a 87       	std	Y+10, r25	; 0x0a
    2d7e:	89 87       	std	Y+9, r24	; 0x09
	Timer1_ConfigType ConfigPTR={0,duty_cycle,PS_8_T1,FAST_PWM_OCR_T1,CLEAR_T1}; //initialize timer as desired
    2d80:	88 e0       	ldi	r24, 0x08	; 8
    2d82:	fe 01       	movw	r30, r28
    2d84:	31 96       	adiw	r30, 0x01	; 1
    2d86:	df 01       	movw	r26, r30
    2d88:	98 2f       	mov	r25, r24
    2d8a:	1d 92       	st	X+, r1
    2d8c:	9a 95       	dec	r25
    2d8e:	e9 f7       	brne	.-6      	; 0x2d8a <Timer1_pwmAdjust+0x58>
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	9c 83       	std	Y+4, r25	; 0x04
    2d96:	8b 83       	std	Y+3, r24	; 0x03
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	8f e0       	ldi	r24, 0x0F	; 15
    2d9e:	8e 83       	std	Y+6, r24	; 0x06
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&ConfigPTR);
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <Timer1_init>
}
    2dac:	2a 96       	adiw	r28, 0x0a	; 10
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <UART_init+0x6>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <UART_init+0x8>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2dce:	1a 82       	std	Y+2, r1	; 0x02
    2dd0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2dd2:	eb e2       	ldi	r30, 0x2B	; 43
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2dda:	ea e2       	ldi	r30, 0x2A	; 42
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	88 e1       	ldi	r24, 0x18	; 24
    2de0:	80 83       	st	Z, r24
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data & 0x04);
    2de2:	aa e2       	ldi	r26, 0x2A	; 42
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	ea e2       	ldi	r30, 0x2A	; 42
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	98 2f       	mov	r25, r24
    2dee:	9b 7f       	andi	r25, 0xFB	; 251
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	fc 81       	ldd	r31, Y+4	; 0x04
    2df4:	80 81       	ld	r24, Z
    2df6:	84 70       	andi	r24, 0x04	; 4
    2df8:	89 2b       	or	r24, r25
    2dfa:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2dfc:	e0 e4       	ldi	r30, 0x40	; 64
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 e8       	ldi	r24, 0x80	; 128
    2e02:	80 83       	st	Z, r24
	UCSRC=(UCSRC & 0xCF)|((Config_Ptr->parity & 0x03)<<4);
    2e04:	a0 e4       	ldi	r26, 0x40	; 64
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e0 e4       	ldi	r30, 0x40	; 64
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	28 2f       	mov	r18, r24
    2e10:	2f 7c       	andi	r18, 0xCF	; 207
    2e12:	eb 81       	ldd	r30, Y+3	; 0x03
    2e14:	fc 81       	ldd	r31, Y+4	; 0x04
    2e16:	81 81       	ldd	r24, Z+1	; 0x01
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	83 70       	andi	r24, 0x03	; 3
    2e1e:	90 70       	andi	r25, 0x00	; 0
    2e20:	82 95       	swap	r24
    2e22:	92 95       	swap	r25
    2e24:	90 7f       	andi	r25, 0xF0	; 240
    2e26:	98 27       	eor	r25, r24
    2e28:	80 7f       	andi	r24, 0xF0	; 240
    2e2a:	98 27       	eor	r25, r24
    2e2c:	82 2b       	or	r24, r18
    2e2e:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF7)|((Config_Ptr->stop_bit & 0x01)<<3);
    2e30:	a0 e4       	ldi	r26, 0x40	; 64
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e0 e4       	ldi	r30, 0x40	; 64
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	27 7f       	andi	r18, 0xF7	; 247
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	81 70       	andi	r24, 0x01	; 1
    2e4a:	90 70       	andi	r25, 0x00	; 0
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	82 2b       	or	r24, r18
    2e5a:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF9)|((Config_Ptr->bit_data & 0x03)<<1);
    2e5c:	a0 e4       	ldi	r26, 0x40	; 64
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e0 e4       	ldi	r30, 0x40	; 64
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	28 2f       	mov	r18, r24
    2e68:	29 7f       	andi	r18, 0xF9	; 249
    2e6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 2f       	mov	r24, r24
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	83 70       	andi	r24, 0x03	; 3
    2e76:	90 70       	andi	r25, 0x00	; 0
    2e78:	88 0f       	add	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	82 2b       	or	r24, r18
    2e7e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2e80:	eb 81       	ldd	r30, Y+3	; 0x03
    2e82:	fc 81       	ldd	r31, Y+4	; 0x04
    2e84:	83 81       	ldd	r24, Z+3	; 0x03
    2e86:	94 81       	ldd	r25, Z+4	; 0x04
    2e88:	a5 81       	ldd	r26, Z+5	; 0x05
    2e8a:	b6 81       	ldd	r27, Z+6	; 0x06
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	aa 1f       	adc	r26, r26
    2e92:	bb 1f       	adc	r27, r27
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	aa 1f       	adc	r26, r26
    2e9a:	bb 1f       	adc	r27, r27
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	aa 1f       	adc	r26, r26
    2ea2:	bb 1f       	adc	r27, r27
    2ea4:	9c 01       	movw	r18, r24
    2ea6:	ad 01       	movw	r20, r26
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	92 e1       	ldi	r25, 0x12	; 18
    2eac:	aa e7       	ldi	r26, 0x7A	; 122
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 67 18 	call	0x30ce	; 0x30ce <__udivmodsi4>
    2eb8:	da 01       	movw	r26, r20
    2eba:	c9 01       	movw	r24, r18
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ec2:	e0 e4       	ldi	r30, 0x40	; 64
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	89 2f       	mov	r24, r25
    2ecc:	99 27       	eor	r25, r25
    2ece:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ed0:	e9 e2       	ldi	r30, 0x29	; 41
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	80 83       	st	Z, r24
}
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint16 data)
{
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <UART_sendByte+0x6>
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	9a 83       	std	Y+2, r25	; 0x02
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ef4:	eb e2       	ldi	r30, 0x2B	; 43
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	80 72       	andi	r24, 0x20	; 32
    2f00:	90 70       	andi	r25, 0x00	; 0
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	b9 f3       	breq	.-18     	; 0x2ef4 <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if(data & 0x0100)
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0a:	80 70       	andi	r24, 0x00	; 0
    2f0c:	91 70       	andi	r25, 0x01	; 1
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	41 f0       	breq	.+16     	; 0x2f22 <UART_sendByte+0x3c>
	{
		SET_BIT(UCSRB,TXB8);
    2f12:	aa e2       	ldi	r26, 0x2A	; 42
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	ea e2       	ldi	r30, 0x2A	; 42
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	81 60       	ori	r24, 0x01	; 1
    2f1e:	8c 93       	st	X, r24
    2f20:	07 c0       	rjmp	.+14     	; 0x2f30 <UART_sendByte+0x4a>
	}
	else
	{
		CLEAR_BIT(UCSRB,TXB8);
    2f22:	aa e2       	ldi	r26, 0x2A	; 42
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	ea e2       	ldi	r30, 0x2A	; 42
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8e 7f       	andi	r24, 0xFE	; 254
    2f2e:	8c 93       	st	X, r24
	}
	UDR = data;
    2f30:	ec e2       	ldi	r30, 0x2C	; 44
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint16 UART_recieveByte(void)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <UART_recieveByte+0x6>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62

	uint16 return_data;
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f4c:	eb e2       	ldi	r30, 0x2B	; 43
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	88 23       	and	r24, r24
    2f54:	dc f7       	brge	.-10     	; 0x2f4c <UART_recieveByte+0xa>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return_data=((GET_BIT(UCSRB,RXB8))<<8)|(UDR);
    2f56:	ea e2       	ldi	r30, 0x2A	; 42
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	82 70       	andi	r24, 0x02	; 2
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	95 95       	asr	r25
    2f66:	87 95       	ror	r24
    2f68:	38 2f       	mov	r19, r24
    2f6a:	22 27       	eor	r18, r18
    2f6c:	ec e2       	ldi	r30, 0x2C	; 44
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	82 2b       	or	r24, r18
    2f78:	93 2b       	or	r25, r19
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01

    return return_data;
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <UART_sendString+0x6>
    2f92:	0f 92       	push	r0
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	9b 83       	std	Y+3, r25	; 0x03
    2f9a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f9c:	19 82       	std	Y+1, r1	; 0x01
    2f9e:	10 c0       	rjmp	.+32     	; 0x2fc0 <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    2faa:	fc 01       	movw	r30, r24
    2fac:	e2 0f       	add	r30, r18
    2fae:	f3 1f       	adc	r31, r19
    2fb0:	80 81       	ld	r24, Z
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <UART_sendByte>
		i++;
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e2 0f       	add	r30, r18
    2fce:	f3 1f       	adc	r31, r19
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 23       	and	r24, r24
    2fd4:	29 f7       	brne	.-54     	; 0x2fa0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <UART_receiveString+0xa>
    2fec:	0f 92       	push	r0
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	9b 83       	std	Y+3, r25	; 0x03
    2ff4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ff6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	8c 01       	movw	r16, r24
    3004:	02 0f       	add	r16, r18
    3006:	13 1f       	adc	r17, r19
    3008:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <UART_recieveByte>
    300c:	f8 01       	movw	r30, r16
    300e:	80 83       	st	Z, r24
    3010:	0f c0       	rjmp	.+30     	; 0x3030 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	9b 81       	ldd	r25, Y+3	; 0x03
    3022:	8c 01       	movw	r16, r24
    3024:	02 0f       	add	r16, r18
    3026:	13 1f       	adc	r17, r19
    3028:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <UART_recieveByte>
    302c:	f8 01       	movw	r30, r16
    302e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	80 81       	ld	r24, Z
    3042:	83 32       	cpi	r24, 0x23	; 35
    3044:	31 f7       	brne	.-52     	; 0x3012 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	9b 81       	ldd	r25, Y+3	; 0x03
    3050:	fc 01       	movw	r30, r24
    3052:	e2 0f       	add	r30, r18
    3054:	f3 1f       	adc	r31, r19
    3056:	10 82       	st	Z, r1
}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	1f 91       	pop	r17
    3064:	0f 91       	pop	r16
    3066:	08 95       	ret

00003068 <__mulsi3>:
    3068:	62 9f       	mul	r22, r18
    306a:	d0 01       	movw	r26, r0
    306c:	73 9f       	mul	r23, r19
    306e:	f0 01       	movw	r30, r0
    3070:	82 9f       	mul	r24, r18
    3072:	e0 0d       	add	r30, r0
    3074:	f1 1d       	adc	r31, r1
    3076:	64 9f       	mul	r22, r20
    3078:	e0 0d       	add	r30, r0
    307a:	f1 1d       	adc	r31, r1
    307c:	92 9f       	mul	r25, r18
    307e:	f0 0d       	add	r31, r0
    3080:	83 9f       	mul	r24, r19
    3082:	f0 0d       	add	r31, r0
    3084:	74 9f       	mul	r23, r20
    3086:	f0 0d       	add	r31, r0
    3088:	65 9f       	mul	r22, r21
    308a:	f0 0d       	add	r31, r0
    308c:	99 27       	eor	r25, r25
    308e:	72 9f       	mul	r23, r18
    3090:	b0 0d       	add	r27, r0
    3092:	e1 1d       	adc	r30, r1
    3094:	f9 1f       	adc	r31, r25
    3096:	63 9f       	mul	r22, r19
    3098:	b0 0d       	add	r27, r0
    309a:	e1 1d       	adc	r30, r1
    309c:	f9 1f       	adc	r31, r25
    309e:	bd 01       	movw	r22, r26
    30a0:	cf 01       	movw	r24, r30
    30a2:	11 24       	eor	r1, r1
    30a4:	08 95       	ret

000030a6 <__udivmodhi4>:
    30a6:	aa 1b       	sub	r26, r26
    30a8:	bb 1b       	sub	r27, r27
    30aa:	51 e1       	ldi	r21, 0x11	; 17
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <__udivmodhi4_ep>

000030ae <__udivmodhi4_loop>:
    30ae:	aa 1f       	adc	r26, r26
    30b0:	bb 1f       	adc	r27, r27
    30b2:	a6 17       	cp	r26, r22
    30b4:	b7 07       	cpc	r27, r23
    30b6:	10 f0       	brcs	.+4      	; 0x30bc <__udivmodhi4_ep>
    30b8:	a6 1b       	sub	r26, r22
    30ba:	b7 0b       	sbc	r27, r23

000030bc <__udivmodhi4_ep>:
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	5a 95       	dec	r21
    30c2:	a9 f7       	brne	.-22     	; 0x30ae <__udivmodhi4_loop>
    30c4:	80 95       	com	r24
    30c6:	90 95       	com	r25
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	08 95       	ret

000030ce <__udivmodsi4>:
    30ce:	a1 e2       	ldi	r26, 0x21	; 33
    30d0:	1a 2e       	mov	r1, r26
    30d2:	aa 1b       	sub	r26, r26
    30d4:	bb 1b       	sub	r27, r27
    30d6:	fd 01       	movw	r30, r26
    30d8:	0d c0       	rjmp	.+26     	; 0x30f4 <__udivmodsi4_ep>

000030da <__udivmodsi4_loop>:
    30da:	aa 1f       	adc	r26, r26
    30dc:	bb 1f       	adc	r27, r27
    30de:	ee 1f       	adc	r30, r30
    30e0:	ff 1f       	adc	r31, r31
    30e2:	a2 17       	cp	r26, r18
    30e4:	b3 07       	cpc	r27, r19
    30e6:	e4 07       	cpc	r30, r20
    30e8:	f5 07       	cpc	r31, r21
    30ea:	20 f0       	brcs	.+8      	; 0x30f4 <__udivmodsi4_ep>
    30ec:	a2 1b       	sub	r26, r18
    30ee:	b3 0b       	sbc	r27, r19
    30f0:	e4 0b       	sbc	r30, r20
    30f2:	f5 0b       	sbc	r31, r21

000030f4 <__udivmodsi4_ep>:
    30f4:	66 1f       	adc	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	88 1f       	adc	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	1a 94       	dec	r1
    30fe:	69 f7       	brne	.-38     	; 0x30da <__udivmodsi4_loop>
    3100:	60 95       	com	r22
    3102:	70 95       	com	r23
    3104:	80 95       	com	r24
    3106:	90 95       	com	r25
    3108:	9b 01       	movw	r18, r22
    310a:	ac 01       	movw	r20, r24
    310c:	bd 01       	movw	r22, r26
    310e:	cf 01       	movw	r24, r30
    3110:	08 95       	ret

00003112 <__prologue_saves__>:
    3112:	2f 92       	push	r2
    3114:	3f 92       	push	r3
    3116:	4f 92       	push	r4
    3118:	5f 92       	push	r5
    311a:	6f 92       	push	r6
    311c:	7f 92       	push	r7
    311e:	8f 92       	push	r8
    3120:	9f 92       	push	r9
    3122:	af 92       	push	r10
    3124:	bf 92       	push	r11
    3126:	cf 92       	push	r12
    3128:	df 92       	push	r13
    312a:	ef 92       	push	r14
    312c:	ff 92       	push	r15
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	ca 1b       	sub	r28, r26
    313c:	db 0b       	sbc	r29, r27
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	09 94       	ijmp

0000314a <__epilogue_restores__>:
    314a:	2a 88       	ldd	r2, Y+18	; 0x12
    314c:	39 88       	ldd	r3, Y+17	; 0x11
    314e:	48 88       	ldd	r4, Y+16	; 0x10
    3150:	5f 84       	ldd	r5, Y+15	; 0x0f
    3152:	6e 84       	ldd	r6, Y+14	; 0x0e
    3154:	7d 84       	ldd	r7, Y+13	; 0x0d
    3156:	8c 84       	ldd	r8, Y+12	; 0x0c
    3158:	9b 84       	ldd	r9, Y+11	; 0x0b
    315a:	aa 84       	ldd	r10, Y+10	; 0x0a
    315c:	b9 84       	ldd	r11, Y+9	; 0x09
    315e:	c8 84       	ldd	r12, Y+8	; 0x08
    3160:	df 80       	ldd	r13, Y+7	; 0x07
    3162:	ee 80       	ldd	r14, Y+6	; 0x06
    3164:	fd 80       	ldd	r15, Y+5	; 0x05
    3166:	0c 81       	ldd	r16, Y+4	; 0x04
    3168:	1b 81       	ldd	r17, Y+3	; 0x03
    316a:	aa 81       	ldd	r26, Y+2	; 0x02
    316c:	b9 81       	ldd	r27, Y+1	; 0x01
    316e:	ce 0f       	add	r28, r30
    3170:	d1 1d       	adc	r29, r1
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	ed 01       	movw	r28, r26
    317e:	08 95       	ret

00003180 <itoa>:
    3180:	fb 01       	movw	r30, r22
    3182:	9f 01       	movw	r18, r30
    3184:	e8 94       	clt
    3186:	42 30       	cpi	r20, 0x02	; 2
    3188:	c4 f0       	brlt	.+48     	; 0x31ba <itoa+0x3a>
    318a:	45 32       	cpi	r20, 0x25	; 37
    318c:	b4 f4       	brge	.+44     	; 0x31ba <itoa+0x3a>
    318e:	4a 30       	cpi	r20, 0x0A	; 10
    3190:	29 f4       	brne	.+10     	; 0x319c <itoa+0x1c>
    3192:	97 fb       	bst	r25, 7
    3194:	1e f4       	brtc	.+6      	; 0x319c <itoa+0x1c>
    3196:	90 95       	com	r25
    3198:	81 95       	neg	r24
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	64 2f       	mov	r22, r20
    319e:	77 27       	eor	r23, r23
    31a0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodhi4>
    31a4:	80 5d       	subi	r24, 0xD0	; 208
    31a6:	8a 33       	cpi	r24, 0x3A	; 58
    31a8:	0c f0       	brlt	.+2      	; 0x31ac <itoa+0x2c>
    31aa:	89 5d       	subi	r24, 0xD9	; 217
    31ac:	81 93       	st	Z+, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	a1 f7       	brne	.-24     	; 0x319c <itoa+0x1c>
    31b4:	16 f4       	brtc	.+4      	; 0x31ba <itoa+0x3a>
    31b6:	5d e2       	ldi	r21, 0x2D	; 45
    31b8:	51 93       	st	Z+, r21
    31ba:	10 82       	st	Z, r1
    31bc:	c9 01       	movw	r24, r18
    31be:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <strrev>

000031c2 <strrev>:
    31c2:	dc 01       	movw	r26, r24
    31c4:	fc 01       	movw	r30, r24
    31c6:	67 2f       	mov	r22, r23
    31c8:	71 91       	ld	r23, Z+
    31ca:	77 23       	and	r23, r23
    31cc:	e1 f7       	brne	.-8      	; 0x31c6 <strrev+0x4>
    31ce:	32 97       	sbiw	r30, 0x02	; 2
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <strrev+0x18>
    31d2:	7c 91       	ld	r23, X
    31d4:	6d 93       	st	X+, r22
    31d6:	70 83       	st	Z, r23
    31d8:	62 91       	ld	r22, -Z
    31da:	ae 17       	cp	r26, r30
    31dc:	bf 07       	cpc	r27, r31
    31de:	c8 f3       	brcs	.-14     	; 0x31d2 <strrev+0x10>
    31e0:	08 95       	ret

000031e2 <_exit>:
    31e2:	f8 94       	cli

000031e4 <__stop_program>:
    31e4:	ff cf       	rjmp	.-2      	; 0x31e4 <__stop_program>
