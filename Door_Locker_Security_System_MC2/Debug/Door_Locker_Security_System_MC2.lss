
Door_Locker_Security_System_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000026d8  0000276c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007c  0080007c  00002788  2**0
                  ALLOC
  3 .stab         0000288c  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016be  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__vector_7>
      20:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_8>
      24:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_9>
      28:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__vector_10>
      2c:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *                     				Main 	                                   *
 *******************************************************************************/


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	66 97       	sbiw	r28, 0x16	; 22
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG   |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	DcMotor_Init();
     b68:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <DcMotor_Init>

	Buzzer_init();
     b6c:	0e 94 2d 09 	call	0x125a	; 0x125a <Buzzer_init>

	TWI_ConfigType twiConfig={0b00000010,400000};
     b70:	ce 01       	movw	r24, r28
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	9e 87       	std	Y+14, r25	; 0x0e
     b76:	8d 87       	std	Y+13, r24	; 0x0d
     b78:	ef e6       	ldi	r30, 0x6F	; 111
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	f8 8b       	std	Y+16, r31	; 0x10
     b7e:	ef 87       	std	Y+15, r30	; 0x0f
     b80:	f5 e0       	ldi	r31, 0x05	; 5
     b82:	f9 8b       	std	Y+17, r31	; 0x11
     b84:	ef 85       	ldd	r30, Y+15	; 0x0f
     b86:	f8 89       	ldd	r31, Y+16	; 0x10
     b88:	00 80       	ld	r0, Z
     b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8c:	98 89       	ldd	r25, Y+16	; 0x10
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	98 8b       	std	Y+16, r25	; 0x10
     b92:	8f 87       	std	Y+15, r24	; 0x0f
     b94:	ed 85       	ldd	r30, Y+13	; 0x0d
     b96:	fe 85       	ldd	r31, Y+14	; 0x0e
     b98:	00 82       	st	Z, r0
     b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	9e 87       	std	Y+14, r25	; 0x0e
     ba2:	8d 87       	std	Y+13, r24	; 0x0d
     ba4:	99 89       	ldd	r25, Y+17	; 0x11
     ba6:	91 50       	subi	r25, 0x01	; 1
     ba8:	99 8b       	std	Y+17, r25	; 0x11
     baa:	e9 89       	ldd	r30, Y+17	; 0x11
     bac:	ee 23       	and	r30, r30
     bae:	51 f7       	brne	.-44     	; 0xb84 <main+0x3e>
	TWI_init(&twiConfig);
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <TWI_init>

	UART_ConfigType uartConfig={BIT_DATA_8,DISABLED,ONE_BIT,9600};
     bb8:	ce 01       	movw	r24, r28
     bba:	06 96       	adiw	r24, 0x06	; 6
     bbc:	9b 8b       	std	Y+19, r25	; 0x13
     bbe:	8a 8b       	std	Y+18, r24	; 0x12
     bc0:	e8 e6       	ldi	r30, 0x68	; 104
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	fd 8b       	std	Y+21, r31	; 0x15
     bc6:	ec 8b       	std	Y+20, r30	; 0x14
     bc8:	f7 e0       	ldi	r31, 0x07	; 7
     bca:	fe 8b       	std	Y+22, r31	; 0x16
     bcc:	ec 89       	ldd	r30, Y+20	; 0x14
     bce:	fd 89       	ldd	r31, Y+21	; 0x15
     bd0:	00 80       	ld	r0, Z
     bd2:	8c 89       	ldd	r24, Y+20	; 0x14
     bd4:	9d 89       	ldd	r25, Y+21	; 0x15
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	9d 8b       	std	Y+21, r25	; 0x15
     bda:	8c 8b       	std	Y+20, r24	; 0x14
     bdc:	ea 89       	ldd	r30, Y+18	; 0x12
     bde:	fb 89       	ldd	r31, Y+19	; 0x13
     be0:	00 82       	st	Z, r0
     be2:	8a 89       	ldd	r24, Y+18	; 0x12
     be4:	9b 89       	ldd	r25, Y+19	; 0x13
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9b 8b       	std	Y+19, r25	; 0x13
     bea:	8a 8b       	std	Y+18, r24	; 0x12
     bec:	9e 89       	ldd	r25, Y+22	; 0x16
     bee:	91 50       	subi	r25, 0x01	; 1
     bf0:	9e 8b       	std	Y+22, r25	; 0x16
     bf2:	ee 89       	ldd	r30, Y+22	; 0x16
     bf4:	ee 23       	and	r30, r30
     bf6:	51 f7       	brne	.-44     	; 0xbcc <main+0x86>
	UART_init(&uartConfig);
     bf8:	ce 01       	movw	r24, r28
     bfa:	06 96       	adiw	r24, 0x06	; 6
     bfc:	0e 94 89 11 	call	0x2312	; 0x2312 <UART_init>

	SavePass();
     c00:	0e 94 12 06 	call	0xc24	; 0xc24 <SavePass>

	for(;;)
	{
		if(UART_recieveByte()=='+')
     c04:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
     c08:	8b 32       	cpi	r24, 0x2B	; 43
     c0a:	91 05       	cpc	r25, r1
     c0c:	19 f4       	brne	.+6      	; 0xc14 <main+0xce>
		{
			OpenDoor();
     c0e:	0e 94 1c 07 	call	0xe38	; 0xe38 <OpenDoor>
     c12:	f8 cf       	rjmp	.-16     	; 0xc04 <main+0xbe>
		}
		else if(UART_recieveByte()=='-')
     c14:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
     c18:	8d 32       	cpi	r24, 0x2D	; 45
     c1a:	91 05       	cpc	r25, r1
     c1c:	99 f7       	brne	.-26     	; 0xc04 <main+0xbe>
		{
			ChangePass();
     c1e:	0e 94 0e 08 	call	0x101c	; 0x101c <ChangePass>
     c22:	f0 cf       	rjmp	.-32     	; 0xc04 <main+0xbe>

00000c24 <SavePass>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void SavePass(void)
{
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	6a 97       	sbiw	r28, 0x1a	; 26
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[5]={0};
     c3c:	85 e0       	ldi	r24, 0x05	; 5
     c3e:	fe 01       	movw	r30, r28
     c40:	76 96       	adiw	r30, 0x16	; 22
     c42:	df 01       	movw	r26, r30
     c44:	98 2f       	mov	r25, r24
     c46:	1d 92       	st	X+, r1
     c48:	9a 95       	dec	r25
     c4a:	e9 f7       	brne	.-6      	; 0xc46 <SavePass+0x22>
	Message_Status State=SUCCEED;
     c4c:	1d 8a       	std	Y+21, r1	; 0x15
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     c4e:	1c 8a       	std	Y+20, r1	; 0x14
     c50:	1b 8a       	std	Y+19, r1	; 0x13
     c52:	10 c0       	rjmp	.+32     	; 0xc74 <SavePass+0x50>
	{
		arr[i]=UART_recieveByte();
     c54:	0b 89       	ldd	r16, Y+19	; 0x13
     c56:	1c 89       	ldd	r17, Y+20	; 0x14
     c58:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
     c5c:	28 2f       	mov	r18, r24
     c5e:	ce 01       	movw	r24, r28
     c60:	46 96       	adiw	r24, 0x16	; 22
     c62:	fc 01       	movw	r30, r24
     c64:	e0 0f       	add	r30, r16
     c66:	f1 1f       	adc	r31, r17
     c68:	20 83       	st	Z, r18

void SavePass(void)
{
	uint8 arr[5]={0};
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     c6a:	8b 89       	ldd	r24, Y+19	; 0x13
     c6c:	9c 89       	ldd	r25, Y+20	; 0x14
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9c 8b       	std	Y+20, r25	; 0x14
     c72:	8b 8b       	std	Y+19, r24	; 0x13
     c74:	8b 89       	ldd	r24, Y+19	; 0x13
     c76:	9c 89       	ldd	r25, Y+20	; 0x14
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	91 05       	cpc	r25, r1
     c7c:	5c f3       	brlt	.-42     	; 0xc54 <SavePass+0x30>
	{
		arr[i]=UART_recieveByte();
	}
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     c7e:	1a 8a       	std	Y+18, r1	; 0x12
     c80:	19 8a       	std	Y+17, r1	; 0x11
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <SavePass+0x8c>
	{
		if(arr[i]!=UART_recieveByte())
     c84:	29 89       	ldd	r18, Y+17	; 0x11
     c86:	3a 89       	ldd	r19, Y+18	; 0x12
     c88:	ce 01       	movw	r24, r28
     c8a:	46 96       	adiw	r24, 0x16	; 22
     c8c:	fc 01       	movw	r30, r24
     c8e:	e2 0f       	add	r30, r18
     c90:	f3 1f       	adc	r31, r19
     c92:	80 81       	ld	r24, Z
     c94:	08 2f       	mov	r16, r24
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
     c9c:	08 17       	cp	r16, r24
     c9e:	19 07       	cpc	r17, r25
     ca0:	11 f0       	breq	.+4      	; 0xca6 <SavePass+0x82>
		{
			State=BREAK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	8d 8b       	std	Y+21, r24	; 0x15
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
	{
		arr[i]=UART_recieveByte();
	}
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     ca6:	89 89       	ldd	r24, Y+17	; 0x11
     ca8:	9a 89       	ldd	r25, Y+18	; 0x12
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	9a 8b       	std	Y+18, r25	; 0x12
     cae:	89 8b       	std	Y+17, r24	; 0x11
     cb0:	89 89       	ldd	r24, Y+17	; 0x11
     cb2:	9a 89       	ldd	r25, Y+18	; 0x12
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	91 05       	cpc	r25, r1
     cb8:	2c f3       	brlt	.-54     	; 0xc84 <SavePass+0x60>
		if(arr[i]!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	UART_sendByte(State);
     cba:	8d 89       	ldd	r24, Y+21	; 0x15
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 1d 12 	call	0x243a	; 0x243a <UART_sendByte>
	if(State==BREAK)
     cc4:	8d 89       	ldd	r24, Y+21	; 0x15
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <SavePass+0xac>
	{
		SavePass();
     cca:	0e 94 12 06 	call	0xc24	; 0xc24 <SavePass>
     cce:	91 c0       	rjmp	.+290    	; 0xdf2 <SavePass+0x1ce>
	}
	else
	{
		for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     cd0:	18 8a       	std	Y+16, r1	; 0x10
     cd2:	1f 86       	std	Y+15, r1	; 0x0f
     cd4:	88 c0       	rjmp	.+272    	; 0xde6 <SavePass+0x1c2>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a0 e2       	ldi	r26, 0x20	; 32
     cdc:	b1 e4       	ldi	r27, 0x41	; 65
     cde:	8b 87       	std	Y+11, r24	; 0x0b
     ce0:	9c 87       	std	Y+12, r25	; 0x0c
     ce2:	ad 87       	std	Y+13, r26	; 0x0d
     ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cea:	8d 85       	ldd	r24, Y+13	; 0x0d
     cec:	9e 85       	ldd	r25, Y+14	; 0x0e
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4a ef       	ldi	r20, 0xFA	; 250
     cf4:	54 e4       	ldi	r21, 0x44	; 68
     cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8f 83       	std	Y+7, r24	; 0x07
     d00:	98 87       	std	Y+8, r25	; 0x08
     d02:	a9 87       	std	Y+9, r26	; 0x09
     d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d06:	6f 81       	ldd	r22, Y+7	; 0x07
     d08:	78 85       	ldd	r23, Y+8	; 0x08
     d0a:	89 85       	ldd	r24, Y+9	; 0x09
     d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e8       	ldi	r20, 0x80	; 128
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1a:	88 23       	and	r24, r24
     d1c:	2c f4       	brge	.+10     	; 0xd28 <SavePass+0x104>
		__ticks = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	3f c0       	rjmp	.+126    	; 0xda6 <SavePass+0x182>
	else if (__tmp > 65535)
     d28:	6f 81       	ldd	r22, Y+7	; 0x07
     d2a:	78 85       	ldd	r23, Y+8	; 0x08
     d2c:	89 85       	ldd	r24, Y+9	; 0x09
     d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	57 e4       	ldi	r21, 0x47	; 71
     d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	4c f5       	brge	.+82     	; 0xd92 <SavePass+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d40:	6b 85       	ldd	r22, Y+11	; 0x0b
     d42:	7c 85       	ldd	r23, Y+12	; 0x0c
     d44:	8d 85       	ldd	r24, Y+13	; 0x0d
     d46:	9e 85       	ldd	r25, Y+14	; 0x0e
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	bc 01       	movw	r22, r24
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	8d 83       	std	Y+5, r24	; 0x05
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <SavePass+0x164>
     d6a:	88 ec       	ldi	r24, 0xC8	; 200
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 83       	std	Y+4, r25	; 0x04
     d70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <SavePass+0x152>
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f7       	brne	.-38     	; 0xd6a <SavePass+0x146>
     d90:	14 c0       	rjmp	.+40     	; 0xdba <SavePass+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	9e 81       	ldd	r25, Y+6	; 0x06
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <SavePass+0x18e>
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			EEPROM_writeByte(PASSWORD_ADDRESS+i,arr[i]);
     dba:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbc:	98 89       	ldd	r25, Y+16	; 0x10
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	ac 01       	movw	r20, r24
     dc4:	2f 85       	ldd	r18, Y+15	; 0x0f
     dc6:	38 89       	ldd	r19, Y+16	; 0x10
     dc8:	ce 01       	movw	r24, r28
     dca:	46 96       	adiw	r24, 0x16	; 22
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	20 81       	ld	r18, Z
     dd4:	ca 01       	movw	r24, r20
     dd6:	62 2f       	mov	r22, r18
     dd8:	0e 94 ca 09 	call	0x1394	; 0x1394 <EEPROM_writeByte>
	{
		SavePass();
	}
	else
	{
		for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
     ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dde:	98 89       	ldd	r25, Y+16	; 0x10
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	98 8b       	std	Y+16, r25	; 0x10
     de4:	8f 87       	std	Y+15, r24	; 0x0f
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
     de8:	98 89       	ldd	r25, Y+16	; 0x10
     dea:	85 30       	cpi	r24, 0x05	; 5
     dec:	91 05       	cpc	r25, r1
     dee:	0c f4       	brge	.+2      	; 0xdf2 <SavePass+0x1ce>
     df0:	72 cf       	rjmp	.-284    	; 0xcd6 <SavePass+0xb2>
		{
			_delay_ms(10);
			EEPROM_writeByte(PASSWORD_ADDRESS+i,arr[i]);
		}
	}
}
     df2:	6a 96       	adiw	r28, 0x1a	; 26
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <buzzer>:

void buzzer(void)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     e10:	80 91 7c 00 	lds	r24, 0x007C
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 93 7c 00 	sts	0x007C, r24
	Buzzer_on();
     e1a:	0e 94 48 09 	call	0x1290	; 0x1290 <Buzzer_on>
	if(g_tick==120)
     e1e:	80 91 7c 00 	lds	r24, 0x007C
     e22:	88 37       	cpi	r24, 0x78	; 120
     e24:	31 f4       	brne	.+12     	; 0xe32 <buzzer+0x2a>
	{
		Buzzer_off();
     e26:	0e 94 59 09 	call	0x12b2	; 0x12b2 <Buzzer_off>
		g_tick=0;
     e2a:	10 92 7c 00 	sts	0x007C, r1
		Timer1_deInit();
     e2e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <Timer1_deInit>
	}

}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <OpenDoor>:


void OpenDoor(void)
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	6f 97       	sbiw	r28, 0x1f	; 31
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
	uint8 read;
	Message_Status State=SUCCEED;
     e50:	19 8a       	std	Y+17, r1	; 0x11
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++) //check if password is correct
     e52:	18 8a       	std	Y+16, r1	; 0x10
     e54:	1f 86       	std	Y+15, r1	; 0x0f
     e56:	8b c0       	rjmp	.+278    	; 0xf6e <OpenDoor+0x136>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e2       	ldi	r26, 0x20	; 32
     e5e:	b1 e4       	ldi	r27, 0x41	; 65
     e60:	8b 87       	std	Y+11, r24	; 0x0b
     e62:	9c 87       	std	Y+12, r25	; 0x0c
     e64:	ad 87       	std	Y+13, r26	; 0x0d
     e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e68:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a ef       	ldi	r20, 0xFA	; 250
     e76:	54 e4       	ldi	r21, 0x44	; 68
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	8f 83       	std	Y+7, r24	; 0x07
     e82:	98 87       	std	Y+8, r25	; 0x08
     e84:	a9 87       	std	Y+9, r26	; 0x09
     e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	78 85       	ldd	r23, Y+8	; 0x08
     e8c:	89 85       	ldd	r24, Y+9	; 0x09
     e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	2c f4       	brge	.+10     	; 0xeaa <OpenDoor+0x72>
		__ticks = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9e 83       	std	Y+6, r25	; 0x06
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <OpenDoor+0xf0>
	else if (__tmp > 65535)
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	3f ef       	ldi	r19, 0xFF	; 255
     eb6:	4f e7       	ldi	r20, 0x7F	; 127
     eb8:	57 e4       	ldi	r21, 0x47	; 71
     eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	4c f5       	brge	.+82     	; 0xf14 <OpenDoor+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <OpenDoor+0xd2>
     eec:	88 ec       	ldi	r24, 0xC8	; 200
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <OpenDoor+0xc0>
     efc:	9c 83       	std	Y+4, r25	; 0x04
     efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	69 f7       	brne	.-38     	; 0xeec <OpenDoor+0xb4>
     f12:	14 c0       	rjmp	.+40     	; 0xf3c <OpenDoor+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <OpenDoor+0xfc>
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(10);
		EEPROM_readByte(PASSWORD_ADDRESS+i, &read);
     f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3e:	98 89       	ldd	r25, Y+16	; 0x10
     f40:	81 50       	subi	r24, 0x01	; 1
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	9e 01       	movw	r18, r28
     f46:	2e 5e       	subi	r18, 0xEE	; 238
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	b9 01       	movw	r22, r18
     f4c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <EEPROM_readByte>
		if(read!=UART_recieveByte())
     f50:	8a 89       	ldd	r24, Y+18	; 0x12
     f52:	08 2f       	mov	r16, r24
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
     f5a:	08 17       	cp	r16, r24
     f5c:	19 07       	cpc	r17, r25
     f5e:	11 f0       	breq	.+4      	; 0xf64 <OpenDoor+0x12c>
		{
			State=BREAK;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	89 8b       	std	Y+17, r24	; 0x11

void OpenDoor(void)
{
	uint8 read;
	Message_Status State=SUCCEED;
	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++) //check if password is correct
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	98 89       	ldd	r25, Y+16	; 0x10
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	98 8b       	std	Y+16, r25	; 0x10
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
     f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f70:	98 89       	ldd	r25, Y+16	; 0x10
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	91 05       	cpc	r25, r1
     f76:	0c f4       	brge	.+2      	; 0xf7a <OpenDoor+0x142>
     f78:	6f cf       	rjmp	.-290    	; 0xe58 <OpenDoor+0x20>
		{
			State=BREAK;
		}
	}

	UART_sendByte(State); //send STATE to other MC
     f7a:	89 89       	ldd	r24, Y+17	; 0x11
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 1d 12 	call	0x243a	; 0x243a <UART_sendByte>

	if(State==SUCCEED) //success & open door
     f84:	89 89       	ldd	r24, Y+17	; 0x11
     f86:	88 23       	and	r24, r24
     f88:	59 f5       	brne	.+86     	; 0xfe0 <OpenDoor+0x1a8>
	{
		counterCheck=0;
     f8a:	10 92 7e 00 	sts	0x007E, r1

		Timer1_setCallBack(MotorDoor);
     f8e:	87 ed       	ldi	r24, 0xD7	; 215
     f90:	98 e0       	ldi	r25, 0x08	; 8
     f92:	0e 94 92 10 	call	0x2124	; 0x2124 <Timer1_setCallBack>
		Timer1_ConfigType t1Config={0,0,PS_64_T1,NORM_T1,NONE,TOGGLE_T1};
     f96:	ce 01       	movw	r24, r28
     f98:	43 96       	adiw	r24, 0x13	; 19
     f9a:	9c 8f       	std	Y+28, r25	; 0x1c
     f9c:	8b 8f       	std	Y+27, r24	; 0x1b
     f9e:	e4 e7       	ldi	r30, 0x74	; 116
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	fe 8f       	std	Y+30, r31	; 0x1e
     fa4:	ed 8f       	std	Y+29, r30	; 0x1d
     fa6:	f8 e0       	ldi	r31, 0x08	; 8
     fa8:	ff 8f       	std	Y+31, r31	; 0x1f
     faa:	ed 8d       	ldd	r30, Y+29	; 0x1d
     fac:	fe 8d       	ldd	r31, Y+30	; 0x1e
     fae:	00 80       	ld	r0, Z
     fb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	9e 8f       	std	Y+30, r25	; 0x1e
     fb8:	8d 8f       	std	Y+29, r24	; 0x1d
     fba:	eb 8d       	ldd	r30, Y+27	; 0x1b
     fbc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     fbe:	00 82       	st	Z, r0
     fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	9c 8f       	std	Y+28, r25	; 0x1c
     fc8:	8b 8f       	std	Y+27, r24	; 0x1b
     fca:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fcc:	91 50       	subi	r25, 0x01	; 1
     fce:	9f 8f       	std	Y+31, r25	; 0x1f
     fd0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     fd2:	ee 23       	and	r30, r30
     fd4:	51 f7       	brne	.-44     	; 0xfaa <OpenDoor+0x172>
		Timer1_init(&t1Config);
     fd6:	ce 01       	movw	r24, r28
     fd8:	43 96       	adiw	r24, 0x13	; 19
     fda:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Timer1_init>
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <OpenDoor+0x1ce>
	}
	else if(State==BREAK) //failure
     fe0:	89 89       	ldd	r24, Y+17	; 0x11
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	81 f4       	brne	.+32     	; 0x1006 <OpenDoor+0x1ce>
	{
		counterCheck++;
     fe6:	80 91 7e 00 	lds	r24, 0x007E
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	80 93 7e 00 	sts	0x007E, r24
		if(counterCheck==3) //send error if counter = 3
     ff0:	80 91 7e 00 	lds	r24, 0x007E
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	29 f4       	brne	.+10     	; 0x1002 <OpenDoor+0x1ca>
		{
			counterCheck=0;
     ff8:	10 92 7e 00 	sts	0x007E, r1
			Error();
     ffc:	0e 94 06 09 	call	0x120c	; 0x120c <Error>
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <OpenDoor+0x1ce>
		}
		else
		{
			OpenDoor(); //repeat as long as counter less than 3
    1002:	0e 94 1c 07 	call	0xe38	; 0xe38 <OpenDoor>
		}
	}
}
    1006:	6f 96       	adiw	r28, 0x1f	; 31
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <ChangePass>:
void ChangePass(void)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	62 97       	sbiw	r28, 0x12	; 18
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
	uint8 read;
	Message_Status State=SUCCEED;
    1034:	19 8a       	std	Y+17, r1	; 0x11

	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
    1036:	18 8a       	std	Y+16, r1	; 0x10
    1038:	1f 86       	std	Y+15, r1	; 0x0f
    103a:	8b c0       	rjmp	.+278    	; 0x1152 <ChangePass+0x136>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e2       	ldi	r26, 0x20	; 32
    1042:	b1 e4       	ldi	r27, 0x41	; 65
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	9c 87       	std	Y+12, r25	; 0x0c
    1048:	ad 87       	std	Y+13, r26	; 0x0d
    104a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8f 83       	std	Y+7, r24	; 0x07
    1066:	98 87       	std	Y+8, r25	; 0x08
    1068:	a9 87       	std	Y+9, r26	; 0x09
    106a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106c:	6f 81       	ldd	r22, Y+7	; 0x07
    106e:	78 85       	ldd	r23, Y+8	; 0x08
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <ChangePass+0x72>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	3f c0       	rjmp	.+126    	; 0x110c <ChangePass+0xf0>
	else if (__tmp > 65535)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <ChangePass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <ChangePass+0xd2>
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <ChangePass+0xc0>
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <ChangePass+0xb4>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <ChangePass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <ChangePass+0xfc>
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(10);
		EEPROM_readByte(PASSWORD_ADDRESS+i, &read);
    1120:	8f 85       	ldd	r24, Y+15	; 0x0f
    1122:	98 89       	ldd	r25, Y+16	; 0x10
    1124:	81 50       	subi	r24, 0x01	; 1
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	9e 01       	movw	r18, r28
    112a:	2e 5e       	subi	r18, 0xEE	; 238
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	b9 01       	movw	r22, r18
    1130:	0e 94 0b 0a 	call	0x1416	; 0x1416 <EEPROM_readByte>

		if(read!=UART_recieveByte())
    1134:	8a 89       	ldd	r24, Y+18	; 0x12
    1136:	08 2f       	mov	r16, r24
    1138:	10 e0       	ldi	r17, 0x00	; 0
    113a:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
    113e:	08 17       	cp	r16, r24
    1140:	19 07       	cpc	r17, r25
    1142:	11 f0       	breq	.+4      	; 0x1148 <ChangePass+0x12c>
		{
			State=BREAK;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	89 8b       	std	Y+17, r24	; 0x11
void ChangePass(void)
{
	uint8 read;
	Message_Status State=SUCCEED;

	for(int i=0;i<NO_OF_DIGITS_IN_PASS;i++)
    1148:	8f 85       	ldd	r24, Y+15	; 0x0f
    114a:	98 89       	ldd	r25, Y+16	; 0x10
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	98 8b       	std	Y+16, r25	; 0x10
    1150:	8f 87       	std	Y+15, r24	; 0x0f
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
    1154:	98 89       	ldd	r25, Y+16	; 0x10
    1156:	85 30       	cpi	r24, 0x05	; 5
    1158:	91 05       	cpc	r25, r1
    115a:	0c f4       	brge	.+2      	; 0x115e <ChangePass+0x142>
    115c:	6f cf       	rjmp	.-290    	; 0x103c <ChangePass+0x20>
		if(read!=UART_recieveByte())
		{
			State=BREAK;
		}
	}
	UART_sendByte(State);
    115e:	89 89       	ldd	r24, Y+17	; 0x11
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 1d 12 	call	0x243a	; 0x243a <UART_sendByte>
	if(State==SUCCEED)
    1168:	89 89       	ldd	r24, Y+17	; 0x11
    116a:	88 23       	and	r24, r24
    116c:	29 f4       	brne	.+10     	; 0x1178 <ChangePass+0x15c>
	{
		counterCheck=0;
    116e:	10 92 7e 00 	sts	0x007E, r1
		SavePass();
    1172:	0e 94 12 06 	call	0xc24	; 0xc24 <SavePass>
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <ChangePass+0x17c>
	}
	else
	{
		counterCheck++;
    1178:	80 91 7e 00 	lds	r24, 0x007E
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	80 93 7e 00 	sts	0x007E, r24
		if(counterCheck==3)
    1182:	80 91 7e 00 	lds	r24, 0x007E
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	29 f4       	brne	.+10     	; 0x1194 <ChangePass+0x178>
		{
			counterCheck=0;
    118a:	10 92 7e 00 	sts	0x007E, r1
			Error();
    118e:	0e 94 06 09 	call	0x120c	; 0x120c <Error>
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <ChangePass+0x17c>
		}
		else
		{
			ChangePass();
    1194:	0e 94 0e 08 	call	0x101c	; 0x101c <ChangePass>
		}

	}
}
    1198:	62 96       	adiw	r28, 0x12	; 18
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <MotorDoor>:

void MotorDoor(void)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11b6:	80 91 7c 00 	lds	r24, 0x007C
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	80 93 7c 00 	sts	0x007C, r24
	if(g_tick==66)
    11c0:	80 91 7c 00 	lds	r24, 0x007C
    11c4:	82 34       	cpi	r24, 0x42	; 66
    11c6:	49 f4       	brne	.+18     	; 0x11da <MotorDoor+0x2c>
	{
		DcMotor_Rotate(NO_ROTATION,100);
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	64 e6       	ldi	r22, 0x64	; 100
    11cc:	0e 94 85 09 	call	0x130a	; 0x130a <DcMotor_Rotate>
		Timer1_deInit();
    11d0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <Timer1_deInit>
		g_tick=0;
    11d4:	10 92 7c 00 	sts	0x007C, r1
    11d8:	16 c0       	rjmp	.+44     	; 0x1206 <MotorDoor+0x58>
	}
	else if(g_tick<30)
    11da:	80 91 7c 00 	lds	r24, 0x007C
    11de:	8e 31       	cpi	r24, 0x1E	; 30
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <MotorDoor+0x3e>
	{
		DcMotor_Rotate(CW_ROTATION,100);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	64 e6       	ldi	r22, 0x64	; 100
    11e6:	0e 94 85 09 	call	0x130a	; 0x130a <DcMotor_Rotate>
    11ea:	0d c0       	rjmp	.+26     	; 0x1206 <MotorDoor+0x58>
	}
	else if(g_tick<36)
    11ec:	80 91 7c 00 	lds	r24, 0x007C
    11f0:	84 32       	cpi	r24, 0x24	; 36
    11f2:	28 f4       	brcc	.+10     	; 0x11fe <MotorDoor+0x50>
	{
		DcMotor_Rotate(NO_ROTATION,100);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	64 e6       	ldi	r22, 0x64	; 100
    11f8:	0e 94 85 09 	call	0x130a	; 0x130a <DcMotor_Rotate>
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <MotorDoor+0x58>
	}
	else
	{
		DcMotor_Rotate(CCW_ROTATION,100);
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	64 e6       	ldi	r22, 0x64	; 100
    1202:	0e 94 85 09 	call	0x130a	; 0x130a <DcMotor_Rotate>
	}

}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <Error>:


void Error(void)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	28 97       	sbiw	r28, 0x08	; 8
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(buzzer);
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	97 e0       	ldi	r25, 0x07	; 7
    1224:	0e 94 92 10 	call	0x2124	; 0x2124 <Timer1_setCallBack>
	Timer1_ConfigType t1Config={0,0,PS_64_T1,NONE,TOGGLE_T1};
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	fe 01       	movw	r30, r28
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	df 01       	movw	r26, r30
    1230:	98 2f       	mov	r25, r24
    1232:	1d 92       	st	X+, r1
    1234:	9a 95       	dec	r25
    1236:	e9 f7       	brne	.-6      	; 0x1232 <Error+0x26>
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&t1Config);
    1240:	ce 01       	movw	r24, r28
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Timer1_init>
}
    1248:	28 96       	adiw	r28, 0x08	; 8
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <Buzzer_init>:
/*
 * Description :
 * Initialize the Buzzer:
 */
void Buzzer_init(void)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN1_ID,PIN_OUTPUT);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	63 e0       	ldi	r22, 0x03	; 3
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN2_ID,PIN_OUTPUT);
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN1_ID,LOGIC_LOW);
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	63 e0       	ldi	r22, 0x03	; 3
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN2_ID,LOGIC_LOW);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>

}
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <Buzzer_on>:
/*
 * Description :
 * Turn ON Buzzer
 */
void Buzzer_on(void)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN1_ID,LOGIC_HIGH);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	63 e0       	ldi	r22, 0x03	; 3
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN2_ID,LOGIC_LOW);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>

}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Buzzer_off>:
/*
 * Description :
 * Turn OFF Buzzer
 */
void Buzzer_off(void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN1_ID,LOGIC_LOW);
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	63 e0       	ldi	r22, 0x03	; 3
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN2_ID,LOGIC_LOW);
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	64 e0       	ldi	r22, 0x04	; 4
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>

}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <DcMotor_Init>:
 * 1. Setup the DC Motor pins directions by use the GPIO driver.
 * 2. Enable Driver.
 * 3. Initialize DC Motor State as Idle.
 */
void DcMotor_Init(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	/* Configure Pins as OUTPUT */
	GPIO_setupPinDirection(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,PIN_OUTPUT);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,PIN_OUTPUT);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>


	/* Initialize Pins as LOGIC_LOW */
	GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DcMotor_Rotate>:
 * Set Direction & Speed the DC Motor:
 * 1. Set Direction depending on argument.
 * 2. Set PWM using PWM Driver.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <DcMotor_Rotate+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DcMotor_Rotate+0x8>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3c 83       	std	Y+4, r19	; 0x04
    1322:	2b 83       	std	Y+3, r18	; 0x03
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	91 05       	cpc	r25, r1
    132c:	a1 f0       	breq	.+40     	; 0x1356 <DcMotor_Rotate+0x4c>
    132e:	2b 81       	ldd	r18, Y+3	; 0x03
    1330:	3c 81       	ldd	r19, Y+4	; 0x04
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	d1 f0       	breq	.+52     	; 0x136c <DcMotor_Rotate+0x62>
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	01 f5       	brne	.+64     	; 0x1380 <DcMotor_Rotate+0x76>
	{
	case NO_ROTATION:
		GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	62 e0       	ldi	r22, 0x02	; 2
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
    1354:	15 c0       	rjmp	.+42     	; 0x1380 <DcMotor_Rotate+0x76>
		break;
	case CW_ROTATION:
			GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_HIGH);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
    136a:	0a c0       	rjmp	.+20     	; 0x1380 <DcMotor_Rotate+0x76>
			break;
	case CCW_ROTATION:
			GPIO_writePin(DC_MOTOR_INPUT1_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_INPUT2_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_HIGH);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	62 e0       	ldi	r22, 0x02	; 2
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
			break;
	}
	Timer0_pwmAdjust(speed); //send duty cycle to timer
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <Timer0_pwmAdjust>
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <EEPROM_writeByte+0x6>
    139a:	00 d0       	rcall	.+0      	; 0x139c <EEPROM_writeByte+0x8>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13a6:	0e 94 22 11 	call	0x2244	; 0x2244 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13aa:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <EEPROM_writeByte+0x22>
        return ERROR;
    13b2:	1c 82       	std	Y+4, r1	; 0x04
    13b4:	28 c0       	rjmp	.+80     	; 0x1406 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	80 70       	andi	r24, 0x00	; 0
    13bc:	97 70       	andi	r25, 0x07	; 7
    13be:	88 0f       	add	r24, r24
    13c0:	89 2f       	mov	r24, r25
    13c2:	88 1f       	adc	r24, r24
    13c4:	99 0b       	sbc	r25, r25
    13c6:	91 95       	neg	r25
    13c8:	80 6a       	ori	r24, 0xA0	; 160
    13ca:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13ce:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    13d2:	88 31       	cpi	r24, 0x18	; 24
    13d4:	11 f0       	breq	.+4      	; 0x13da <EEPROM_writeByte+0x46>
        return ERROR; 
    13d6:	1c 82       	std	Y+4, r1	; 0x04
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13e0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    13e4:	88 32       	cpi	r24, 0x28	; 40
    13e6:	11 f0       	breq	.+4      	; 0x13ec <EEPROM_writeByte+0x58>
        return ERROR;
    13e8:	1c 82       	std	Y+4, r1	; 0x04
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13f2:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    13f6:	88 32       	cpi	r24, 0x28	; 40
    13f8:	11 f0       	breq	.+4      	; 0x13fe <EEPROM_writeByte+0x6a>
        return ERROR;
    13fa:	1c 82       	std	Y+4, r1	; 0x04
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13fe:	0e 94 32 11 	call	0x2264	; 0x2264 <TWI_stop>
	
    return SUCCESS;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	8c 83       	std	Y+4, r24	; 0x04
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <EEPROM_readByte+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <EEPROM_readByte+0x8>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	7c 83       	std	Y+4, r23	; 0x04
    142a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    142c:	0e 94 22 11 	call	0x2244	; 0x2244 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1430:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    1434:	88 30       	cpi	r24, 0x08	; 8
    1436:	11 f0       	breq	.+4      	; 0x143c <EEPROM_readByte+0x26>
        return ERROR;
    1438:	1d 82       	std	Y+5, r1	; 0x05
    143a:	44 c0       	rjmp	.+136    	; 0x14c4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	80 70       	andi	r24, 0x00	; 0
    1442:	97 70       	andi	r25, 0x07	; 7
    1444:	88 0f       	add	r24, r24
    1446:	89 2f       	mov	r24, r25
    1448:	88 1f       	adc	r24, r24
    144a:	99 0b       	sbc	r25, r25
    144c:	91 95       	neg	r25
    144e:	80 6a       	ori	r24, 0xA0	; 160
    1450:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1454:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    1458:	88 31       	cpi	r24, 0x18	; 24
    145a:	11 f0       	breq	.+4      	; 0x1460 <EEPROM_readByte+0x4a>
        return ERROR;
    145c:	1d 82       	std	Y+5, r1	; 0x05
    145e:	32 c0       	rjmp	.+100    	; 0x14c4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1466:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    146a:	88 32       	cpi	r24, 0x28	; 40
    146c:	11 f0       	breq	.+4      	; 0x1472 <EEPROM_readByte+0x5c>
        return ERROR;
    146e:	1d 82       	std	Y+5, r1	; 0x05
    1470:	29 c0       	rjmp	.+82     	; 0x14c4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1472:	0e 94 22 11 	call	0x2244	; 0x2244 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1476:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    147a:	80 31       	cpi	r24, 0x10	; 16
    147c:	11 f0       	breq	.+4      	; 0x1482 <EEPROM_readByte+0x6c>
        return ERROR;
    147e:	1d 82       	std	Y+5, r1	; 0x05
    1480:	21 c0       	rjmp	.+66     	; 0x14c4 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	80 70       	andi	r24, 0x00	; 0
    1488:	97 70       	andi	r25, 0x07	; 7
    148a:	88 0f       	add	r24, r24
    148c:	89 2f       	mov	r24, r25
    148e:	88 1f       	adc	r24, r24
    1490:	99 0b       	sbc	r25, r25
    1492:	91 95       	neg	r25
    1494:	81 6a       	ori	r24, 0xA1	; 161
    1496:	0e 94 3d 11 	call	0x227a	; 0x227a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    149a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    149e:	80 34       	cpi	r24, 0x40	; 64
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <EEPROM_readByte+0x90>
        return ERROR;
    14a2:	1d 82       	std	Y+5, r1	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    14a6:	0e 94 67 11 	call	0x22ce	; 0x22ce <TWI_readByteWithNACK>
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    14b0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TWI_getStatus>
    14b4:	88 35       	cpi	r24, 0x58	; 88
    14b6:	11 f0       	breq	.+4      	; 0x14bc <EEPROM_readByte+0xa6>
        return ERROR;
    14b8:	1d 82       	std	Y+5, r1	; 0x05
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    14bc:	0e 94 32 11 	call	0x2264	; 0x2264 <TWI_stop>

    return SUCCESS;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPinDirection+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPinDirection+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	6a 83       	std	Y+2, r22	; 0x02
    14e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <GPIO_setupPinDirection+0x1c>
    14f0:	d5 c0       	rjmp	.+426    	; 0x169c <GPIO_setupPinDirection+0x1c6>
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <GPIO_setupPinDirection+0x24>
    14f8:	d1 c0       	rjmp	.+418    	; 0x169c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3d 83       	std	Y+5, r19	; 0x05
    1502:	2c 83       	std	Y+4, r18	; 0x04
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <GPIO_setupPinDirection+0x3a>
    150e:	43 c0       	rjmp	.+134    	; 0x1596 <GPIO_setupPinDirection+0xc0>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <GPIO_setupPinDirection+0x4e>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	71 f0       	breq	.+28     	; 0x153e <GPIO_setupPinDirection+0x68>
    1522:	bc c0       	rjmp	.+376    	; 0x169c <GPIO_setupPinDirection+0x1c6>
    1524:	2c 81       	ldd	r18, Y+4	; 0x04
    1526:	3d 81       	ldd	r19, Y+5	; 0x05
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <GPIO_setupPinDirection+0x5a>
    152e:	5f c0       	rjmp	.+190    	; 0x15ee <GPIO_setupPinDirection+0x118>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <GPIO_setupPinDirection+0x66>
    153a:	85 c0       	rjmp	.+266    	; 0x1646 <GPIO_setupPinDirection+0x170>
    153c:	af c0       	rjmp	.+350    	; 0x169c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1544:	aa e3       	ldi	r26, 0x3A	; 58
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ea e3       	ldi	r30, 0x3A	; 58
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_setupPinDirection+0x8c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_setupPinDirection+0x88>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	98 c0       	rjmp	.+304    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_setupPinDirection+0xb4>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_setupPinDirection+0xb0>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	83 c0       	rjmp	.+262    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    159c:	a7 e3       	ldi	r26, 0x37	; 55
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e7 e3       	ldi	r30, 0x37	; 55
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_setupPinDirection+0xe4>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_setupPinDirection+0xe0>
    15be:	84 2b       	or	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	6c c0       	rjmp	.+216    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15c4:	a7 e3       	ldi	r26, 0x37	; 55
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e7 e3       	ldi	r30, 0x37	; 55
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_setupPinDirection+0x10c>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_setupPinDirection+0x108>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	57 c0       	rjmp	.+174    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15f4:	a4 e3       	ldi	r26, 0x34	; 52
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e4 e3       	ldi	r30, 0x34	; 52
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0x13c>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0x138>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	40 c0       	rjmp	.+128    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    161c:	a4 e3       	ldi	r26, 0x34	; 52
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_setupPinDirection+0x164>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_setupPinDirection+0x160>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	2b c0       	rjmp	.+86     	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    164c:	a1 e3       	ldi	r26, 0x31	; 49
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e1 e3       	ldi	r30, 0x31	; 49
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0x194>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0x190>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	14 c0       	rjmp	.+40     	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1674:	a1 e3       	ldi	r26, 0x31	; 49
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e1 e3       	ldi	r30, 0x31	; 49
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_setupPinDirection+0x1bc>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_setupPinDirection+0x1b8>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_writePin+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_writePin+0x8>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
    16be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 30       	cpi	r24, 0x08	; 8
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <GPIO_writePin+0x1c>
    16c6:	d5 c0       	rjmp	.+426    	; 0x1872 <GPIO_writePin+0x1c6>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <GPIO_writePin+0x24>
    16ce:	d1 c0       	rjmp	.+418    	; 0x1872 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	3d 83       	std	Y+5, r19	; 0x05
    16d8:	2c 83       	std	Y+4, r18	; 0x04
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <GPIO_writePin+0x3a>
    16e4:	43 c0       	rjmp	.+134    	; 0x176c <GPIO_writePin+0xc0>
    16e6:	2c 81       	ldd	r18, Y+4	; 0x04
    16e8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <GPIO_writePin+0x4e>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	71 f0       	breq	.+28     	; 0x1714 <GPIO_writePin+0x68>
    16f8:	bc c0       	rjmp	.+376    	; 0x1872 <GPIO_writePin+0x1c6>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <GPIO_writePin+0x5a>
    1704:	5f c0       	rjmp	.+190    	; 0x17c4 <GPIO_writePin+0x118>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <GPIO_writePin+0x66>
    1710:	85 c0       	rjmp	.+266    	; 0x181c <GPIO_writePin+0x170>
    1712:	af c0       	rjmp	.+350    	; 0x1872 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	a1 f4       	brne	.+40     	; 0x1742 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    171a:	ab e3       	ldi	r26, 0x3B	; 59
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e3       	ldi	r30, 0x3B	; 59
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_writePin+0x8c>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_writePin+0x88>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	98 c0       	rjmp	.+304    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1742:	ab e3       	ldi	r26, 0x3B	; 59
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	eb e3       	ldi	r30, 0x3B	; 59
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_writePin+0xb4>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_writePin+0xb0>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	83 c0       	rjmp	.+262    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1772:	a8 e3       	ldi	r26, 0x38	; 56
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e8 e3       	ldi	r30, 0x38	; 56
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_writePin+0xe4>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_writePin+0xe0>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	6c c0       	rjmp	.+216    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    179a:	a8 e3       	ldi	r26, 0x38	; 56
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e8 e3       	ldi	r30, 0x38	; 56
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_writePin+0x10c>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_writePin+0x108>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	57 c0       	rjmp	.+174    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0x13c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0x138>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	40 c0       	rjmp	.+128    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17f2:	a5 e3       	ldi	r26, 0x35	; 53
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_writePin+0x164>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_writePin+0x160>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	2b c0       	rjmp	.+86     	; 0x1872 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1822:	a2 e3       	ldi	r26, 0x32	; 50
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e2 e3       	ldi	r30, 0x32	; 50
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0x194>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0x190>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    184a:	a2 e3       	ldi	r26, 0x32	; 50
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e2 e3       	ldi	r30, 0x32	; 50
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_writePin+0x1bc>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_writePin+0x1b8>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <GPIO_readPin+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_readPin+0x8>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1894:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	08 f0       	brcs	.+2      	; 0x189e <GPIO_readPin+0x1c>
    189c:	84 c0       	rjmp	.+264    	; 0x19a6 <GPIO_readPin+0x124>
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	84 30       	cpi	r24, 0x04	; 4
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <GPIO_readPin+0x24>
    18a4:	80 c0       	rjmp	.+256    	; 0x19a6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3d 83       	std	Y+5, r19	; 0x05
    18ae:	2c 83       	std	Y+4, r18	; 0x04
    18b0:	4c 81       	ldd	r20, Y+4	; 0x04
    18b2:	5d 81       	ldd	r21, Y+5	; 0x05
    18b4:	41 30       	cpi	r20, 0x01	; 1
    18b6:	51 05       	cpc	r21, r1
    18b8:	79 f1       	breq	.+94     	; 0x1918 <GPIO_readPin+0x96>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	91 05       	cpc	r25, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <GPIO_readPin+0x4e>
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	21 15       	cp	r18, r1
    18ca:	31 05       	cpc	r19, r1
    18cc:	69 f0       	breq	.+26     	; 0x18e8 <GPIO_readPin+0x66>
    18ce:	6b c0       	rjmp	.+214    	; 0x19a6 <GPIO_readPin+0x124>
    18d0:	4c 81       	ldd	r20, Y+4	; 0x04
    18d2:	5d 81       	ldd	r21, Y+5	; 0x05
    18d4:	42 30       	cpi	r20, 0x02	; 2
    18d6:	51 05       	cpc	r21, r1
    18d8:	b9 f1       	breq	.+110    	; 0x1948 <GPIO_readPin+0xc6>
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <GPIO_readPin+0x64>
    18e4:	49 c0       	rjmp	.+146    	; 0x1978 <GPIO_readPin+0xf6>
    18e6:	5f c0       	rjmp	.+190    	; 0x19a6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18e8:	e9 e3       	ldi	r30, 0x39	; 57
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_readPin+0x7e>
    18fc:	55 95       	asr	r21
    18fe:	47 95       	ror	r20
    1900:	8a 95       	dec	r24
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_readPin+0x7a>
    1904:	ca 01       	movw	r24, r20
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	88 23       	and	r24, r24
    190c:	19 f0       	breq	.+6      	; 0x1914 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	49 c0       	rjmp	.+146    	; 0x19a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	47 c0       	rjmp	.+142    	; 0x19a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1918:	e6 e3       	ldi	r30, 0x36	; 54
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_readPin+0xae>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_readPin+0xaa>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	88 23       	and	r24, r24
    193c:	19 f0       	breq	.+6      	; 0x1944 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	31 c0       	rjmp	.+98     	; 0x19a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	2f c0       	rjmp	.+94     	; 0x19a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1948:	e3 e3       	ldi	r30, 0x33	; 51
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <GPIO_readPin+0xde>
    195c:	55 95       	asr	r21
    195e:	47 95       	ror	r20
    1960:	8a 95       	dec	r24
    1962:	e2 f7       	brpl	.-8      	; 0x195c <GPIO_readPin+0xda>
    1964:	ca 01       	movw	r24, r20
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	90 70       	andi	r25, 0x00	; 0
    196a:	88 23       	and	r24, r24
    196c:	19 f0       	breq	.+6      	; 0x1974 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	19 c0       	rjmp	.+50     	; 0x19a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1974:	19 82       	std	Y+1, r1	; 0x01
    1976:	17 c0       	rjmp	.+46     	; 0x19a6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1978:	e0 e3       	ldi	r30, 0x30	; 48
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a9 01       	movw	r20, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_readPin+0x10e>
    198c:	55 95       	asr	r21
    198e:	47 95       	ror	r20
    1990:	8a 95       	dec	r24
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_readPin+0x10a>
    1994:	ca 01       	movw	r24, r20
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	88 23       	and	r24, r24
    199c:	19 f0       	breq	.+6      	; 0x19a4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19a4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <GPIO_setupPortDirection+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_setupPortDirection+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	90 f5       	brcc	.+100    	; 0x1a32 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3c 83       	std	Y+4, r19	; 0x04
    19d6:	2b 83       	std	Y+3, r18	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	d1 f0       	breq	.+52     	; 0x1a16 <GPIO_setupPortDirection+0x5e>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <GPIO_setupPortDirection+0x3e>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <GPIO_setupPortDirection+0x54>
    19f4:	1e c0       	rjmp	.+60     	; 0x1a32 <GPIO_setupPortDirection+0x7a>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <GPIO_setupPortDirection+0x68>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <GPIO_setupPortDirection+0x72>
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a0c:	ea e3       	ldi	r30, 0x3A	; 58
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	80 83       	st	Z, r24
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a16:	e7 e3       	ldi	r30, 0x37	; 55
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a20:	e4 e3       	ldi	r30, 0x34	; 52
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a2a:	e1 e3       	ldi	r30, 0x31	; 49
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_writePort+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_writePort+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	90 f5       	brcc	.+100    	; 0x1aba <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3c 83       	std	Y+4, r19	; 0x04
    1a5e:	2b 83       	std	Y+3, r18	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	d1 f0       	breq	.+52     	; 0x1a9e <GPIO_writePort+0x5e>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <GPIO_writePort+0x3e>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <GPIO_writePort+0x54>
    1a7c:	1e c0       	rjmp	.+60     	; 0x1aba <GPIO_writePort+0x7a>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <GPIO_writePort+0x68>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <GPIO_writePort+0x72>
    1a92:	13 c0       	rjmp	.+38     	; 0x1aba <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a94:	eb e3       	ldi	r30, 0x3B	; 59
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	80 83       	st	Z, r24
    1a9c:	0e c0       	rjmp	.+28     	; 0x1aba <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a9e:	e8 e3       	ldi	r30, 0x38	; 56
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 83       	st	Z, r24
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1aa8:	e5 e3       	ldi	r30, 0x35	; 53
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	80 83       	st	Z, r24
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_readPort+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <GPIO_readPort+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ad6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	84 30       	cpi	r24, 0x04	; 4
    1adc:	90 f5       	brcc	.+100    	; 0x1b42 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3c 83       	std	Y+4, r19	; 0x04
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	d1 f0       	breq	.+52     	; 0x1b26 <GPIO_readPort+0x5e>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <GPIO_readPort+0x3e>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <GPIO_readPort+0x54>
    1b04:	1e c0       	rjmp	.+60     	; 0x1b42 <GPIO_readPort+0x7a>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <GPIO_readPort+0x68>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <GPIO_readPort+0x72>
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b1c:	e9 e3       	ldi	r30, 0x39	; 57
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b26:	e6 e3       	ldi	r30, 0x36	; 54
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b30:	e3 e3       	ldi	r30, 0x33	; 51
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b3a:	e0 e3       	ldi	r30, 0x30	; 48
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1b52:	1f 92       	push	r1
    1b54:	0f 92       	push	r0
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	0f 92       	push	r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	2f 93       	push	r18
    1b5e:	3f 93       	push	r19
    1b60:	4f 93       	push	r20
    1b62:	5f 93       	push	r21
    1b64:	6f 93       	push	r22
    1b66:	7f 93       	push	r23
    1b68:	8f 93       	push	r24
    1b6a:	9f 93       	push	r25
    1b6c:	af 93       	push	r26
    1b6e:	bf 93       	push	r27
    1b70:	ef 93       	push	r30
    1b72:	ff 93       	push	r31
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    1b7c:	80 91 7f 00 	lds	r24, 0x007F
    1b80:	90 91 80 00 	lds	r25, 0x0080
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b88:	e0 91 7f 00 	lds	r30, 0x007F
    1b8c:	f0 91 80 00 	lds	r31, 0x0080
    1b90:	09 95       	icall
	}
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	0f 90       	pop	r0
    1bb4:	1f 90       	pop	r1
    1bb6:	18 95       	reti

00001bb8 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1bb8:	1f 92       	push	r1
    1bba:	0f 92       	push	r0
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	0f 92       	push	r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	2f 93       	push	r18
    1bc4:	3f 93       	push	r19
    1bc6:	4f 93       	push	r20
    1bc8:	5f 93       	push	r21
    1bca:	6f 93       	push	r22
    1bcc:	7f 93       	push	r23
    1bce:	8f 93       	push	r24
    1bd0:	9f 93       	push	r25
    1bd2:	af 93       	push	r26
    1bd4:	bf 93       	push	r27
    1bd6:	ef 93       	push	r30
    1bd8:	ff 93       	push	r31
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T0 != NULL_PTR)
    1be2:	80 91 7f 00 	lds	r24, 0x007F
    1be6:	90 91 80 00 	lds	r25, 0x0080
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	29 f0       	breq	.+10     	; 0x1bf8 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bee:	e0 91 7f 00 	lds	r30, 0x007F
    1bf2:	f0 91 80 00 	lds	r31, 0x0080
    1bf6:	09 95       	icall
	}
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <Timer0_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <Timer0_init+0x6>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=(TCCR0 & 0xBF)|((Config_Ptr->mode & 0x01)<<6);
    1c2c:	a3 e5       	ldi	r26, 0x53	; 83
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	2f 7b       	andi	r18, 0xBF	; 191
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	83 81       	ldd	r24, Z+3	; 0x03
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	90 70       	andi	r25, 0x00	; 0
    1c48:	00 24       	eor	r0, r0
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	07 94       	ror	r0
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	07 94       	ror	r0
    1c56:	98 2f       	mov	r25, r24
    1c58:	80 2d       	mov	r24, r0
    1c5a:	82 2b       	or	r24, r18
    1c5c:	8c 93       	st	X, r24
	TCCR0=(TCCR0 & 0xF7)|((Config_Ptr->mode & 0x02)<<2);  //configure mode of timer
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	27 7f       	andi	r18, 0xF7	; 247
    1c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c70:	83 81       	ldd	r24, Z+3	; 0x03
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	82 70       	andi	r24, 0x02	; 2
    1c78:	90 70       	andi	r25, 0x00	; 0
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	82 2b       	or	r24, r18
    1c84:	8c 93       	st	X, r24


	TCCR0=(TCCR0 & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    1c86:	a3 e5       	ldi	r26, 0x53	; 83
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e3 e5       	ldi	r30, 0x53	; 83
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	98 2f       	mov	r25, r24
    1c92:	98 7f       	andi	r25, 0xF8	; 248
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	87 70       	andi	r24, 0x07	; 7
    1c9c:	89 2b       	or	r24, r25
    1c9e:	8c 93       	st	X, r24

	TCNT0=Config_Ptr->initial_value; //define initial value
    1ca0:	a2 e5       	ldi	r26, 0x52	; 82
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	80 81       	ld	r24, Z
    1caa:	8c 93       	st	X, r24

	if((Config_Ptr->mode!=NORM_T0)&&(Config_Ptr->mode!=CTC_T0))
    1cac:	e9 81       	ldd	r30, Y+1	; 0x01
    1cae:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb0:	83 81       	ldd	r24, Z+3	; 0x03
    1cb2:	88 23       	and	r24, r24
    1cb4:	51 f0       	breq	.+20     	; 0x1cca <Timer0_init+0xac>
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	83 81       	ldd	r24, Z+3	; 0x03
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <Timer0_init+0xac>
	{
			GPIO_setupPinDirection(PWM_T0_ENABLE_PORT_ID,PWM_T0_ENABLE_PIN_ID,PIN_OUTPUT); //set pwm pin as output
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	}

	if(Config_Ptr->mode!=NORM_T0)
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	83 81       	ldd	r24, Z+3	; 0x03
    1cd0:	88 23       	and	r24, r24
    1cd2:	21 f1       	breq	.+72     	; 0x1d1c <Timer0_init+0xfe>
	{
		TCCR0=(TCCR0 & 0XCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    1cd4:	a3 e5       	ldi	r26, 0x53	; 83
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e3 e5       	ldi	r30, 0x53	; 83
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	28 2f       	mov	r18, r24
    1ce0:	2f 7c       	andi	r18, 0xCF	; 207
    1ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce6:	84 81       	ldd	r24, Z+4	; 0x04
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	83 70       	andi	r24, 0x03	; 3
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	82 95       	swap	r24
    1cf2:	92 95       	swap	r25
    1cf4:	90 7f       	andi	r25, 0xF0	; 240
    1cf6:	98 27       	eor	r25, r24
    1cf8:	80 7f       	andi	r24, 0xF0	; 240
    1cfa:	98 27       	eor	r25, r24
    1cfc:	82 2b       	or	r24, r18
    1cfe:	8c 93       	st	X, r24
		OCR0=Config_Ptr->compare_value; //define compare value
    1d00:	ac e5       	ldi	r26, 0x5C	; 92
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	81 81       	ldd	r24, Z+1	; 0x01
    1d0a:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0); //enable compare interrupt
    1d0c:	a9 e5       	ldi	r26, 0x59	; 89
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e9 e5       	ldi	r30, 0x59	; 89
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	82 60       	ori	r24, 0x02	; 2
    1d18:	8c 93       	st	X, r24
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <Timer0_init+0x10c>
	}
	else
	{
		SET_BIT(TIMSK,TOIE0); //enable overflow interrupt
    1d1c:	a9 e5       	ldi	r26, 0x59	; 89
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e9 e5       	ldi	r30, 0x59	; 89
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	8c 93       	st	X, r24
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <Timer0_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer0_deInit(void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    1d3c:	e3 e5       	ldi	r30, 0x53	; 83
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	10 82       	st	Z, r1
	TCNT0=0;
    1d42:	e2 e5       	ldi	r30, 0x52	; 82
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	10 82       	st	Z, r1
	OCR0=0;
    1d48:	ec e5       	ldi	r30, 0x5C	; 92
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    1d4e:	a9 e5       	ldi	r26, 0x59	; 89
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e9 e5       	ldi	r30, 0x59	; 89
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8d 7f       	andi	r24, 0xFD	; 253
    1d5a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0);
    1d5c:	a9 e5       	ldi	r26, 0x59	; 89
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 e5       	ldi	r30, 0x59	; 89
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8e 7f       	andi	r24, 0xFE	; 254
    1d68:	8c 93       	st	X, r24
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <Timer0_setCallBack+0x6>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T0 = a_ptr;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	90 93 80 00 	sts	0x0080, r25
    1d86:	80 93 7f 00 	sts	0x007F, r24
}
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <Timer0_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer0_pwmAdjust(uint8 duty_cycle)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <Timer0_pwmAdjust+0x6>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <Timer0_pwmAdjust+0x8>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <Timer0_pwmAdjust+0xa>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	8e 83       	std	Y+6, r24	; 0x06
	duty_cycle  = (uint8)(((uint16)255*duty_cycle)/100); //define compare value
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	48 2f       	mov	r20, r24
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	ca 01       	movw	r24, r20
    1dac:	9c 01       	movw	r18, r24
    1dae:	22 0f       	add	r18, r18
    1db0:	33 1f       	adc	r19, r19
    1db2:	c9 01       	movw	r24, r18
    1db4:	96 95       	lsr	r25
    1db6:	98 2f       	mov	r25, r24
    1db8:	88 27       	eor	r24, r24
    1dba:	97 95       	ror	r25
    1dbc:	87 95       	ror	r24
    1dbe:	82 1b       	sub	r24, r18
    1dc0:	93 0b       	sbc	r25, r19
    1dc2:	84 0f       	add	r24, r20
    1dc4:	95 1f       	adc	r25, r21
    1dc6:	24 e6       	ldi	r18, 0x64	; 100
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	b9 01       	movw	r22, r18
    1dcc:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__udivmodhi4>
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8e 83       	std	Y+6, r24	; 0x06
	Timer0_ConfigType ConfigPTR={0,duty_cycle,PS_8_T0,FAST_PWM_T0,CLEAR_T0}; //initialize timer as desired
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	8c 83       	std	Y+4, r24	; 0x04
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	8d 83       	std	Y+5, r24	; 0x05
	Timer0_init(&ConfigPTR);
    1de6:	ce 01       	movw	r24, r28
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Timer0_init>
}
    1dee:	26 96       	adiw	r28, 0x06	; 6
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1e00:	1f 92       	push	r1
    1e02:	0f 92       	push	r0
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	0f 92       	push	r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	2f 93       	push	r18
    1e0c:	3f 93       	push	r19
    1e0e:	4f 93       	push	r20
    1e10:	5f 93       	push	r21
    1e12:	6f 93       	push	r22
    1e14:	7f 93       	push	r23
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	af 93       	push	r26
    1e1c:	bf 93       	push	r27
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    1e2a:	80 91 81 00 	lds	r24, 0x0081
    1e2e:	90 91 82 00 	lds	r25, 0x0082
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	29 f0       	breq	.+10     	; 0x1e40 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e36:	e0 91 81 00 	lds	r30, 0x0081
    1e3a:	f0 91 82 00 	lds	r31, 0x0082
    1e3e:	09 95       	icall
	}
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	11 24       	eor	r1, r1
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    1e90:	80 91 81 00 	lds	r24, 0x0081
    1e94:	90 91 82 00 	lds	r25, 0x0082
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	29 f0       	breq	.+10     	; 0x1ea6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e9c:	e0 91 81 00 	lds	r30, 0x0081
    1ea0:	f0 91 82 00 	lds	r31, 0x0082
    1ea4:	09 95       	icall
	}
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	7f 91       	pop	r23
    1eb8:	6f 91       	pop	r22
    1eba:	5f 91       	pop	r21
    1ebc:	4f 91       	pop	r20
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 93       	push	r18
    1ed8:	3f 93       	push	r19
    1eda:	4f 93       	push	r20
    1edc:	5f 93       	push	r21
    1ede:	6f 93       	push	r22
    1ee0:	7f 93       	push	r23
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	af 93       	push	r26
    1ee8:	bf 93       	push	r27
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_T1 != NULL_PTR)
    1ef6:	80 91 81 00 	lds	r24, 0x0081
    1efa:	90 91 82 00 	lds	r25, 0x0082
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_T1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f02:	e0 91 81 00 	lds	r30, 0x0081
    1f06:	f0 91 82 00 	lds	r31, 0x0082
    1f0a:	09 95       	icall
	}
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	0f 90       	pop	r0
    1f2e:	1f 90       	pop	r1
    1f30:	18 95       	reti

00001f32 <Timer1_init>:
 * 4. Setup compare value if required
 * 5. Set PWM Pins as output if required
 * 6. Enable Interrupts
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <Timer1_init+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=(TCCR1A & 0xFC)|(Config_Ptr->mode & 0x03); //configure timer mode
    1f40:	af e4       	ldi	r26, 0x4F	; 79
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ef e4       	ldi	r30, 0x4F	; 79
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	9c 7f       	andi	r25, 0xFC	; 252
    1f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f50:	fa 81       	ldd	r31, Y+2	; 0x02
    1f52:	85 81       	ldd	r24, Z+5	; 0x05
    1f54:	83 70       	andi	r24, 0x03	; 3
    1f56:	89 2b       	or	r24, r25
    1f58:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B & 0XE7)|((Config_Ptr->mode & 0x0C)<<1);
    1f5a:	ae e4       	ldi	r26, 0x4E	; 78
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ee e4       	ldi	r30, 0x4E	; 78
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	28 2f       	mov	r18, r24
    1f66:	27 7e       	andi	r18, 0xE7	; 231
    1f68:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6c:	85 81       	ldd	r24, Z+5	; 0x05
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	8c 70       	andi	r24, 0x0C	; 12
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	82 2b       	or	r24, r18
    1f7c:	8c 93       	st	X, r24

	TCCR1B=(TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07); //setup prescaler
    1f7e:	ae e4       	ldi	r26, 0x4E	; 78
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ee e4       	ldi	r30, 0x4E	; 78
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	98 2f       	mov	r25, r24
    1f8a:	98 7f       	andi	r25, 0xF8	; 248
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	84 81       	ldd	r24, Z+4	; 0x04
    1f92:	87 70       	andi	r24, 0x07	; 7
    1f94:	89 2b       	or	r24, r25
    1f96:	8c 93       	st	X, r24

	TCNT1=Config_Ptr->initial_value; //define initial value
    1f98:	ac e4       	ldi	r26, 0x4C	; 76
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	11 96       	adiw	r26, 0x01	; 1
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24


	//define pwm pin as output
	if((Config_Ptr->mode!=NORM_T1)&&(Config_Ptr->mode!=CTC_OCR_T1)&&(Config_Ptr->mode!=CTC_ICR_T1))
    1faa:	e9 81       	ldd	r30, Y+1	; 0x01
    1fac:	fa 81       	ldd	r31, Y+2	; 0x02
    1fae:	85 81       	ldd	r24, Z+5	; 0x05
    1fb0:	88 23       	and	r24, r24
    1fb2:	f9 f0       	breq	.+62     	; 0x1ff2 <Timer1_init+0xc0>
    1fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb8:	85 81       	ldd	r24, Z+5	; 0x05
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	d1 f0       	breq	.+52     	; 0x1ff2 <Timer1_init+0xc0>
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	85 81       	ldd	r24, Z+5	; 0x05
    1fc4:	8c 30       	cpi	r24, 0x0C	; 12
    1fc6:	a9 f0       	breq	.+42     	; 0x1ff2 <Timer1_init+0xc0>
	{
		if(Config_Ptr->index==TIMER1A)
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	86 81       	ldd	r24, Z+6	; 0x06
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	31 f4       	brne	.+12     	; 0x1fde <Timer1_init+0xac>
			{
			GPIO_setupPinDirection(PWM_T1A_ENABLE_PORT_ID,PWM_T1A_ENABLE_PIN_ID,PIN_OUTPUT);
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	65 e0       	ldi	r22, 0x05	; 5
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
    1fdc:	0a c0       	rjmp	.+20     	; 0x1ff2 <Timer1_init+0xc0>
			}
			else if(Config_Ptr->index==TIMER1B)
    1fde:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe2:	86 81       	ldd	r24, Z+6	; 0x06
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <Timer1_init+0xc0>
			{
				GPIO_setupPinDirection(PWM_T1B_ENABLE_PORT_ID,PWM_T1B_ENABLE_PIN_ID,PIN_OUTPUT);
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
			}
	}

	if(Config_Ptr->mode!=NORM_T1)
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	85 81       	ldd	r24, Z+5	; 0x05
    1ff8:	88 23       	and	r24, r24
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <Timer1_init+0xcc>
    1ffc:	59 c0       	rjmp	.+178    	; 0x20b0 <Timer1_init+0x17e>
	{
		if(Config_Ptr->index==TIMER1A)
    1ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    2000:	fa 81       	ldd	r31, Y+2	; 0x02
    2002:	86 81       	ldd	r24, Z+6	; 0x06
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	41 f5       	brne	.+80     	; 0x2058 <Timer1_init+0x126>
			{
				TCCR1A=(TCCR1A & 0x3F)|((Config_Ptr->comp_match & 0x03)<<6); //set compare match event
    2008:	af e4       	ldi	r26, 0x4F	; 79
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	ef e4       	ldi	r30, 0x4F	; 79
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	28 2f       	mov	r18, r24
    2014:	2f 73       	andi	r18, 0x3F	; 63
    2016:	e9 81       	ldd	r30, Y+1	; 0x01
    2018:	fa 81       	ldd	r31, Y+2	; 0x02
    201a:	87 81       	ldd	r24, Z+7	; 0x07
    201c:	88 2f       	mov	r24, r24
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	00 24       	eor	r0, r0
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	07 94       	ror	r0
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	07 94       	ror	r0
    202e:	98 2f       	mov	r25, r24
    2030:	80 2d       	mov	r24, r0
    2032:	82 2b       	or	r24, r18
    2034:	8c 93       	st	X, r24
				OCR1A=Config_Ptr->compare_value; //define compare value
    2036:	aa e4       	ldi	r26, 0x4A	; 74
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e9 81       	ldd	r30, Y+1	; 0x01
    203c:	fa 81       	ldd	r31, Y+2	; 0x02
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	9c 93       	st	X, r25
    2046:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1A); //enable compare interrupt
    2048:	a9 e5       	ldi	r26, 0x59	; 89
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e9 e5       	ldi	r30, 0x59	; 89
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	80 61       	ori	r24, 0x10	; 16
    2054:	8c 93       	st	X, r24
    2056:	33 c0       	rjmp	.+102    	; 0x20be <Timer1_init+0x18c>
			}
			else if(Config_Ptr->index==TIMER1B)
    2058:	e9 81       	ldd	r30, Y+1	; 0x01
    205a:	fa 81       	ldd	r31, Y+2	; 0x02
    205c:	86 81       	ldd	r24, Z+6	; 0x06
    205e:	82 30       	cpi	r24, 0x02	; 2
    2060:	71 f5       	brne	.+92     	; 0x20be <Timer1_init+0x18c>
			{
				TCCR1A=(TCCR1A & 0xCF)|((Config_Ptr->comp_match & 0x03)<<4); //set compare match event
    2062:	af e4       	ldi	r26, 0x4F	; 79
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	ef e4       	ldi	r30, 0x4F	; 79
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	28 2f       	mov	r18, r24
    206e:	2f 7c       	andi	r18, 0xCF	; 207
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	87 81       	ldd	r24, Z+7	; 0x07
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	83 70       	andi	r24, 0x03	; 3
    207c:	90 70       	andi	r25, 0x00	; 0
    207e:	82 95       	swap	r24
    2080:	92 95       	swap	r25
    2082:	90 7f       	andi	r25, 0xF0	; 240
    2084:	98 27       	eor	r25, r24
    2086:	80 7f       	andi	r24, 0xF0	; 240
    2088:	98 27       	eor	r25, r24
    208a:	82 2b       	or	r24, r18
    208c:	8c 93       	st	X, r24
				OCR1B=Config_Ptr->compare_value; //define compare value
    208e:	a8 e4       	ldi	r26, 0x48	; 72
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e9 81       	ldd	r30, Y+1	; 0x01
    2094:	fa 81       	ldd	r31, Y+2	; 0x02
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	11 96       	adiw	r26, 0x01	; 1
    209c:	9c 93       	st	X, r25
    209e:	8e 93       	st	-X, r24
				SET_BIT(TIMSK,OCIE1B); //enable compare interrupt
    20a0:	a9 e5       	ldi	r26, 0x59	; 89
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e9 e5       	ldi	r30, 0x59	; 89
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	88 60       	ori	r24, 0x08	; 8
    20ac:	8c 93       	st	X, r24
    20ae:	07 c0       	rjmp	.+14     	; 0x20be <Timer1_init+0x18c>
			}
	}
	else
	{
		SET_BIT(TIMSK,TOIE1); //enable overflow interrupt
    20b0:	a9 e5       	ldi	r26, 0x59	; 89
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e9 e5       	ldi	r30, 0x59	; 89
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	84 60       	ori	r24, 0x04	; 4
    20bc:	8c 93       	st	X, r24
	}
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <Timer1_deInit>:
/*
 * Description :
 * Functional responsible for Deinitialization of Timer 1 by clearing all registers
 */
void Timer1_deInit(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    20d0:	ef e4       	ldi	r30, 0x4F	; 79
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	10 82       	st	Z, r1
	TCCR1B=0;
    20d6:	ee e4       	ldi	r30, 0x4E	; 78
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	10 82       	st	Z, r1
	TCNT1=0;
    20dc:	ec e4       	ldi	r30, 0x4C	; 76
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	11 82       	std	Z+1, r1	; 0x01
    20e2:	10 82       	st	Z, r1
	OCR1A=0;
    20e4:	ea e4       	ldi	r30, 0x4A	; 74
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	11 82       	std	Z+1, r1	; 0x01
    20ea:	10 82       	st	Z, r1
	OCR1B=0;
    20ec:	e8 e4       	ldi	r30, 0x48	; 72
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	11 82       	std	Z+1, r1	; 0x01
    20f2:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
    20f4:	a9 e5       	ldi	r26, 0x59	; 89
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e9 e5       	ldi	r30, 0x59	; 89
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 7e       	andi	r24, 0xEF	; 239
    2100:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    2102:	a9 e5       	ldi	r26, 0x59	; 89
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e9 e5       	ldi	r30, 0x59	; 89
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	87 7f       	andi	r24, 0xF7	; 247
    210e:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    2110:	a9 e5       	ldi	r26, 0x59	; 89
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e9 e5       	ldi	r30, 0x59	; 89
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8b 7f       	andi	r24, 0xFB	; 251
    211c:	8c 93       	st	X, r24
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <Timer1_setCallBack+0x6>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_T1 = a_ptr;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	90 93 82 00 	sts	0x0082, r25
    213a:	80 93 81 00 	sts	0x0081, r24
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <Timer1_pwmAdjust>:

/*
 * Description: Adjust PWM compare value if input is percentage
 */
void Timer1_pwmAdjust(uint16 duty_cycle)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	2a 97       	sbiw	r28, 0x0a	; 10
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	9a 87       	std	Y+10, r25	; 0x0a
    215e:	89 87       	std	Y+9, r24	; 0x09
	duty_cycle  = (uint16)(((uint32)65535*duty_cycle)/100); //define compare value
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	cc 01       	movw	r24, r24
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	2f ef       	ldi	r18, 0xFF	; 255
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 de 12 	call	0x25bc	; 0x25bc <__mulsi3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	24 e6       	ldi	r18, 0x64	; 100
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 11 13 	call	0x2622	; 0x2622 <__udivmodsi4>
    218e:	da 01       	movw	r26, r20
    2190:	c9 01       	movw	r24, r18
    2192:	9a 87       	std	Y+10, r25	; 0x0a
    2194:	89 87       	std	Y+9, r24	; 0x09
	Timer1_ConfigType ConfigPTR={0,duty_cycle,PS_8_T1,FAST_PWM_OCR_T1,CLEAR_T1}; //initialize timer as desired
    2196:	88 e0       	ldi	r24, 0x08	; 8
    2198:	fe 01       	movw	r30, r28
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	df 01       	movw	r26, r30
    219e:	98 2f       	mov	r25, r24
    21a0:	1d 92       	st	X+, r1
    21a2:	9a 95       	dec	r25
    21a4:	e9 f7       	brne	.-6      	; 0x21a0 <Timer1_pwmAdjust+0x58>
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8f e0       	ldi	r24, 0x0F	; 15
    21b4:	8e 83       	std	Y+6, r24	; 0x06
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	8f 83       	std	Y+7, r24	; 0x07
	Timer1_init(&ConfigPTR);
    21ba:	ce 01       	movw	r24, r28
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <Timer1_init>
}
    21c2:	2a 96       	adiw	r28, 0x0a	; 10
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWI_ConfigType* Config_Ptr)
{
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	00 d0       	rcall	.+0      	; 0x21de <TWI_init+0xa>
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = 0x00;
    21e6:	e1 e2       	ldi	r30, 0x21	; 33
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	10 82       	st	Z, r1
	
	TWBR=((8000000/Config_Ptr->bit_rate)-16)/2;
    21ec:	00 e2       	ldi	r16, 0x20	; 32
    21ee:	10 e0       	ldi	r17, 0x00	; 0
    21f0:	e9 81       	ldd	r30, Y+1	; 0x01
    21f2:	fa 81       	ldd	r31, Y+2	; 0x02
    21f4:	21 81       	ldd	r18, Z+1	; 0x01
    21f6:	32 81       	ldd	r19, Z+2	; 0x02
    21f8:	43 81       	ldd	r20, Z+3	; 0x03
    21fa:	54 81       	ldd	r21, Z+4	; 0x04
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	92 e1       	ldi	r25, 0x12	; 18
    2200:	aa e7       	ldi	r26, 0x7A	; 122
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 11 13 	call	0x2622	; 0x2622 <__udivmodsi4>
    220c:	da 01       	movw	r26, r20
    220e:	c9 01       	movw	r24, r18
    2210:	40 97       	sbiw	r24, 0x10	; 16
    2212:	a1 09       	sbc	r26, r1
    2214:	b1 09       	sbc	r27, r1
    2216:	b6 95       	lsr	r27
    2218:	a7 95       	ror	r26
    221a:	97 95       	ror	r25
    221c:	87 95       	ror	r24
    221e:	f8 01       	movw	r30, r16
    2220:	80 83       	st	Z, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    2222:	a2 e2       	ldi	r26, 0x22	; 34
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	80 81       	ld	r24, Z
    222c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    222e:	e6 e5       	ldi	r30, 0x56	; 86
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	84 e0       	ldi	r24, 0x04	; 4
    2234:	80 83       	st	Z, r24
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <TWI_start>:

void TWI_start(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    224c:	e6 e5       	ldi	r30, 0x56	; 86
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	84 ea       	ldi	r24, 0xA4	; 164
    2252:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2254:	e6 e5       	ldi	r30, 0x56	; 86
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 23       	and	r24, r24
    225c:	dc f7       	brge	.-10     	; 0x2254 <TWI_start+0x10>
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <TWI_stop>:

void TWI_stop(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    226c:	e6 e5       	ldi	r30, 0x56	; 86
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	84 e9       	ldi	r24, 0x94	; 148
    2272:	80 83       	st	Z, r24
}
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	0f 92       	push	r0
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2286:	e3 e2       	ldi	r30, 0x23	; 35
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    228e:	e6 e5       	ldi	r30, 0x56	; 86
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	84 e8       	ldi	r24, 0x84	; 132
    2294:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2296:	e6 e5       	ldi	r30, 0x56	; 86
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	88 23       	and	r24, r24
    229e:	dc f7       	brge	.-10     	; 0x2296 <TWI_writeByte+0x1c>
}
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    22b0:	e6 e5       	ldi	r30, 0x56	; 86
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	84 ec       	ldi	r24, 0xC4	; 196
    22b6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22b8:	e6 e5       	ldi	r30, 0x56	; 86
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 23       	and	r24, r24
    22c0:	dc f7       	brge	.-10     	; 0x22b8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22c2:	e3 e2       	ldi	r30, 0x23	; 35
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22d6:	e6 e5       	ldi	r30, 0x56	; 86
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	84 e8       	ldi	r24, 0x84	; 132
    22dc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22de:	e6 e5       	ldi	r30, 0x56	; 86
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	88 23       	and	r24, r24
    22e6:	dc f7       	brge	.-10     	; 0x22de <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    22e8:	e3 e2       	ldi	r30, 0x23	; 35
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    22fe:	e1 e2       	ldi	r30, 0x21	; 33
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 7f       	andi	r24, 0xF8	; 248
    2306:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2308:	89 81       	ldd	r24, Y+1	; 0x01
}
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	00 d0       	rcall	.+0      	; 0x2318 <UART_init+0x6>
    2318:	00 d0       	rcall	.+0      	; 0x231a <UART_init+0x8>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2322:	1a 82       	std	Y+2, r1	; 0x02
    2324:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2326:	eb e2       	ldi	r30, 0x2B	; 43
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    232e:	ea e2       	ldi	r30, 0x2A	; 42
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	88 e1       	ldi	r24, 0x18	; 24
    2334:	80 83       	st	Z, r24
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data & 0x04);
    2336:	aa e2       	ldi	r26, 0x2A	; 42
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	ea e2       	ldi	r30, 0x2A	; 42
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	98 2f       	mov	r25, r24
    2342:	9b 7f       	andi	r25, 0xFB	; 251
    2344:	eb 81       	ldd	r30, Y+3	; 0x03
    2346:	fc 81       	ldd	r31, Y+4	; 0x04
    2348:	80 81       	ld	r24, Z
    234a:	84 70       	andi	r24, 0x04	; 4
    234c:	89 2b       	or	r24, r25
    234e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2350:	e0 e4       	ldi	r30, 0x40	; 64
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 e8       	ldi	r24, 0x80	; 128
    2356:	80 83       	st	Z, r24
	UCSRC=(UCSRC & 0xCF)|((Config_Ptr->parity & 0x03)<<4);
    2358:	a0 e4       	ldi	r26, 0x40	; 64
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e0 e4       	ldi	r30, 0x40	; 64
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	28 2f       	mov	r18, r24
    2364:	2f 7c       	andi	r18, 0xCF	; 207
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	83 70       	andi	r24, 0x03	; 3
    2372:	90 70       	andi	r25, 0x00	; 0
    2374:	82 95       	swap	r24
    2376:	92 95       	swap	r25
    2378:	90 7f       	andi	r25, 0xF0	; 240
    237a:	98 27       	eor	r25, r24
    237c:	80 7f       	andi	r24, 0xF0	; 240
    237e:	98 27       	eor	r25, r24
    2380:	82 2b       	or	r24, r18
    2382:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF7)|((Config_Ptr->stop_bit & 0x01)<<3);
    2384:	a0 e4       	ldi	r26, 0x40	; 64
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e0 e4       	ldi	r30, 0x40	; 64
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	28 2f       	mov	r18, r24
    2390:	27 7f       	andi	r18, 0xF7	; 247
    2392:	eb 81       	ldd	r30, Y+3	; 0x03
    2394:	fc 81       	ldd	r31, Y+4	; 0x04
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	81 70       	andi	r24, 0x01	; 1
    239e:	90 70       	andi	r25, 0x00	; 0
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	82 2b       	or	r24, r18
    23ae:	8c 93       	st	X, r24
	UCSRC=(UCSRC & 0xF9)|((Config_Ptr->bit_data & 0x03)<<1);
    23b0:	a0 e4       	ldi	r26, 0x40	; 64
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e0 e4       	ldi	r30, 0x40	; 64
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	28 2f       	mov	r18, r24
    23bc:	29 7f       	andi	r18, 0xF9	; 249
    23be:	eb 81       	ldd	r30, Y+3	; 0x03
    23c0:	fc 81       	ldd	r31, Y+4	; 0x04
    23c2:	80 81       	ld	r24, Z
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	83 70       	andi	r24, 0x03	; 3
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	82 2b       	or	r24, r18
    23d2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    23d4:	eb 81       	ldd	r30, Y+3	; 0x03
    23d6:	fc 81       	ldd	r31, Y+4	; 0x04
    23d8:	83 81       	ldd	r24, Z+3	; 0x03
    23da:	94 81       	ldd	r25, Z+4	; 0x04
    23dc:	a5 81       	ldd	r26, Z+5	; 0x05
    23de:	b6 81       	ldd	r27, Z+6	; 0x06
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	aa 1f       	adc	r26, r26
    23f6:	bb 1f       	adc	r27, r27
    23f8:	9c 01       	movw	r18, r24
    23fa:	ad 01       	movw	r20, r26
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	92 e1       	ldi	r25, 0x12	; 18
    2400:	aa e7       	ldi	r26, 0x7A	; 122
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 11 13 	call	0x2622	; 0x2622 <__udivmodsi4>
    240c:	da 01       	movw	r26, r20
    240e:	c9 01       	movw	r24, r18
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2416:	e0 e4       	ldi	r30, 0x40	; 64
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	89 2f       	mov	r24, r25
    2420:	99 27       	eor	r25, r25
    2422:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2424:	e9 e2       	ldi	r30, 0x29	; 41
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	80 83       	st	Z, r24
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint16 data)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <UART_sendByte+0x6>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2448:	eb e2       	ldi	r30, 0x2B	; 43
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	80 72       	andi	r24, 0x20	; 32
    2454:	90 70       	andi	r25, 0x00	; 0
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	b9 f3       	breq	.-18     	; 0x2448 <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	if(data & 0x0100)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	80 70       	andi	r24, 0x00	; 0
    2460:	91 70       	andi	r25, 0x01	; 1
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	41 f0       	breq	.+16     	; 0x2476 <UART_sendByte+0x3c>
	{
		SET_BIT(UCSRB,TXB8);
    2466:	aa e2       	ldi	r26, 0x2A	; 42
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ea e2       	ldi	r30, 0x2A	; 42
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	81 60       	ori	r24, 0x01	; 1
    2472:	8c 93       	st	X, r24
    2474:	07 c0       	rjmp	.+14     	; 0x2484 <UART_sendByte+0x4a>
	}
	else
	{
		CLEAR_BIT(UCSRB,TXB8);
    2476:	aa e2       	ldi	r26, 0x2A	; 42
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ea e2       	ldi	r30, 0x2A	; 42
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	8e 7f       	andi	r24, 0xFE	; 254
    2482:	8c 93       	st	X, r24
	}
	UDR = data;
    2484:	ec e2       	ldi	r30, 0x2C	; 44
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint16 UART_recieveByte(void)
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	00 d0       	rcall	.+0      	; 0x249c <UART_recieveByte+0x6>
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62

	uint16 return_data;
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24a0:	eb e2       	ldi	r30, 0x2B	; 43
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	dc f7       	brge	.-10     	; 0x24a0 <UART_recieveByte+0xa>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return_data=((GET_BIT(UCSRB,RXB8))<<8)|(UDR);
    24aa:	ea e2       	ldi	r30, 0x2A	; 42
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	88 2f       	mov	r24, r24
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	82 70       	andi	r24, 0x02	; 2
    24b6:	90 70       	andi	r25, 0x00	; 0
    24b8:	95 95       	asr	r25
    24ba:	87 95       	ror	r24
    24bc:	38 2f       	mov	r19, r24
    24be:	22 27       	eor	r18, r18
    24c0:	ec e2       	ldi	r30, 0x2C	; 44
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	82 2b       	or	r24, r18
    24cc:	93 2b       	or	r25, r19
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01

    return return_data;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <UART_sendString+0x6>
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	10 c0       	rjmp	.+32     	; 0x2514 <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	fc 01       	movw	r30, r24
    2500:	e2 0f       	add	r30, r18
    2502:	f3 1f       	adc	r31, r19
    2504:	80 81       	ld	r24, Z
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 1d 12 	call	0x243a	; 0x243a <UART_sendByte>
		i++;
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	fc 01       	movw	r30, r24
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	80 81       	ld	r24, Z
    2526:	88 23       	and	r24, r24
    2528:	29 f7       	brne	.-54     	; 0x24f4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <UART_receiveString+0xa>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9b 83       	std	Y+3, r25	; 0x03
    2548:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    254a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	8c 01       	movw	r16, r24
    2558:	02 0f       	add	r16, r18
    255a:	13 1f       	adc	r17, r19
    255c:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
    2560:	f8 01       	movw	r30, r16
    2562:	80 83       	st	Z, r24
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	8c 01       	movw	r16, r24
    2578:	02 0f       	add	r16, r18
    257a:	13 1f       	adc	r17, r19
    257c:	0e 94 4b 12 	call	0x2496	; 0x2496 <UART_recieveByte>
    2580:	f8 01       	movw	r30, r16
    2582:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	fc 01       	movw	r30, r24
    2590:	e2 0f       	add	r30, r18
    2592:	f3 1f       	adc	r31, r19
    2594:	80 81       	ld	r24, Z
    2596:	83 32       	cpi	r24, 0x23	; 35
    2598:	31 f7       	brne	.-52     	; 0x2566 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	9b 81       	ldd	r25, Y+3	; 0x03
    25a4:	fc 01       	movw	r30, r24
    25a6:	e2 0f       	add	r30, r18
    25a8:	f3 1f       	adc	r31, r19
    25aa:	10 82       	st	Z, r1
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	08 95       	ret

000025bc <__mulsi3>:
    25bc:	62 9f       	mul	r22, r18
    25be:	d0 01       	movw	r26, r0
    25c0:	73 9f       	mul	r23, r19
    25c2:	f0 01       	movw	r30, r0
    25c4:	82 9f       	mul	r24, r18
    25c6:	e0 0d       	add	r30, r0
    25c8:	f1 1d       	adc	r31, r1
    25ca:	64 9f       	mul	r22, r20
    25cc:	e0 0d       	add	r30, r0
    25ce:	f1 1d       	adc	r31, r1
    25d0:	92 9f       	mul	r25, r18
    25d2:	f0 0d       	add	r31, r0
    25d4:	83 9f       	mul	r24, r19
    25d6:	f0 0d       	add	r31, r0
    25d8:	74 9f       	mul	r23, r20
    25da:	f0 0d       	add	r31, r0
    25dc:	65 9f       	mul	r22, r21
    25de:	f0 0d       	add	r31, r0
    25e0:	99 27       	eor	r25, r25
    25e2:	72 9f       	mul	r23, r18
    25e4:	b0 0d       	add	r27, r0
    25e6:	e1 1d       	adc	r30, r1
    25e8:	f9 1f       	adc	r31, r25
    25ea:	63 9f       	mul	r22, r19
    25ec:	b0 0d       	add	r27, r0
    25ee:	e1 1d       	adc	r30, r1
    25f0:	f9 1f       	adc	r31, r25
    25f2:	bd 01       	movw	r22, r26
    25f4:	cf 01       	movw	r24, r30
    25f6:	11 24       	eor	r1, r1
    25f8:	08 95       	ret

000025fa <__udivmodhi4>:
    25fa:	aa 1b       	sub	r26, r26
    25fc:	bb 1b       	sub	r27, r27
    25fe:	51 e1       	ldi	r21, 0x11	; 17
    2600:	07 c0       	rjmp	.+14     	; 0x2610 <__udivmodhi4_ep>

00002602 <__udivmodhi4_loop>:
    2602:	aa 1f       	adc	r26, r26
    2604:	bb 1f       	adc	r27, r27
    2606:	a6 17       	cp	r26, r22
    2608:	b7 07       	cpc	r27, r23
    260a:	10 f0       	brcs	.+4      	; 0x2610 <__udivmodhi4_ep>
    260c:	a6 1b       	sub	r26, r22
    260e:	b7 0b       	sbc	r27, r23

00002610 <__udivmodhi4_ep>:
    2610:	88 1f       	adc	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	5a 95       	dec	r21
    2616:	a9 f7       	brne	.-22     	; 0x2602 <__udivmodhi4_loop>
    2618:	80 95       	com	r24
    261a:	90 95       	com	r25
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	08 95       	ret

00002622 <__udivmodsi4>:
    2622:	a1 e2       	ldi	r26, 0x21	; 33
    2624:	1a 2e       	mov	r1, r26
    2626:	aa 1b       	sub	r26, r26
    2628:	bb 1b       	sub	r27, r27
    262a:	fd 01       	movw	r30, r26
    262c:	0d c0       	rjmp	.+26     	; 0x2648 <__udivmodsi4_ep>

0000262e <__udivmodsi4_loop>:
    262e:	aa 1f       	adc	r26, r26
    2630:	bb 1f       	adc	r27, r27
    2632:	ee 1f       	adc	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	a2 17       	cp	r26, r18
    2638:	b3 07       	cpc	r27, r19
    263a:	e4 07       	cpc	r30, r20
    263c:	f5 07       	cpc	r31, r21
    263e:	20 f0       	brcs	.+8      	; 0x2648 <__udivmodsi4_ep>
    2640:	a2 1b       	sub	r26, r18
    2642:	b3 0b       	sbc	r27, r19
    2644:	e4 0b       	sbc	r30, r20
    2646:	f5 0b       	sbc	r31, r21

00002648 <__udivmodsi4_ep>:
    2648:	66 1f       	adc	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	88 1f       	adc	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	1a 94       	dec	r1
    2652:	69 f7       	brne	.-38     	; 0x262e <__udivmodsi4_loop>
    2654:	60 95       	com	r22
    2656:	70 95       	com	r23
    2658:	80 95       	com	r24
    265a:	90 95       	com	r25
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	bd 01       	movw	r22, r26
    2662:	cf 01       	movw	r24, r30
    2664:	08 95       	ret

00002666 <__prologue_saves__>:
    2666:	2f 92       	push	r2
    2668:	3f 92       	push	r3
    266a:	4f 92       	push	r4
    266c:	5f 92       	push	r5
    266e:	6f 92       	push	r6
    2670:	7f 92       	push	r7
    2672:	8f 92       	push	r8
    2674:	9f 92       	push	r9
    2676:	af 92       	push	r10
    2678:	bf 92       	push	r11
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	ca 1b       	sub	r28, r26
    2690:	db 0b       	sbc	r29, r27
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	09 94       	ijmp

0000269e <__epilogue_restores__>:
    269e:	2a 88       	ldd	r2, Y+18	; 0x12
    26a0:	39 88       	ldd	r3, Y+17	; 0x11
    26a2:	48 88       	ldd	r4, Y+16	; 0x10
    26a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    26ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    26b0:	b9 84       	ldd	r11, Y+9	; 0x09
    26b2:	c8 84       	ldd	r12, Y+8	; 0x08
    26b4:	df 80       	ldd	r13, Y+7	; 0x07
    26b6:	ee 80       	ldd	r14, Y+6	; 0x06
    26b8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ba:	0c 81       	ldd	r16, Y+4	; 0x04
    26bc:	1b 81       	ldd	r17, Y+3	; 0x03
    26be:	aa 81       	ldd	r26, Y+2	; 0x02
    26c0:	b9 81       	ldd	r27, Y+1	; 0x01
    26c2:	ce 0f       	add	r28, r30
    26c4:	d1 1d       	adc	r29, r1
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	ed 01       	movw	r28, r26
    26d2:	08 95       	ret

000026d4 <_exit>:
    26d4:	f8 94       	cli

000026d6 <__stop_program>:
    26d6:	ff cf       	rjmp	.-2      	; 0x26d6 <__stop_program>
